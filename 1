namespace LootClicker.Items
{
	// Token: 0x02000391 RID: 913
	public static partial class Equipment
	{
		// Token: 0x17000CDA RID: 3290
		// (get) Token: 0x06002AFC RID: 11004 RVA: 0x0001BD7B File Offset: 0x00019F7B
		// (set) Token: 0x06002AFD RID: 11005 RVA: 0x0001BD82 File Offset: 0x00019F82
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultMeleeWeapons
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CDB RID: 3291
		// (get) Token: 0x06002AFE RID: 11006 RVA: 0x0001BD8A File Offset: 0x00019F8A
		// (set) Token: 0x06002AFF RID: 11007 RVA: 0x0001BD91 File Offset: 0x00019F91
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultRangedWeapons
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CDC RID: 3292
		// (get) Token: 0x06002B00 RID: 11008 RVA: 0x0001BD99 File Offset: 0x00019F99
		// (set) Token: 0x06002B01 RID: 11009 RVA: 0x0001BDA0 File Offset: 0x00019FA0
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultMagicWeapons
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CDD RID: 3293
		// (get) Token: 0x06002B02 RID: 11010 RVA: 0x0001BDA8 File Offset: 0x00019FA8
		// (set) Token: 0x06002B03 RID: 11011 RVA: 0x0001BDAF File Offset: 0x00019FAF
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultMeleeOffhands
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CDE RID: 3294
		// (get) Token: 0x06002B04 RID: 11012 RVA: 0x0001BDB7 File Offset: 0x00019FB7
		// (set) Token: 0x06002B05 RID: 11013 RVA: 0x0001BDBE File Offset: 0x00019FBE
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultRangedOffhands
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CDF RID: 3295
		// (get) Token: 0x06002B06 RID: 11014 RVA: 0x0001BDC6 File Offset: 0x00019FC6
		// (set) Token: 0x06002B07 RID: 11015 RVA: 0x0001BDCD File Offset: 0x00019FCD
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultMagicOffhands
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE0 RID: 3296
		// (get) Token: 0x06002B08 RID: 11016 RVA: 0x0001BDD5 File Offset: 0x00019FD5
		// (set) Token: 0x06002B09 RID: 11017 RVA: 0x0001BDDC File Offset: 0x00019FDC
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultChests
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE1 RID: 3297
		// (get) Token: 0x06002B0A RID: 11018 RVA: 0x0001BDE4 File Offset: 0x00019FE4
		// (set) Token: 0x06002B0B RID: 11019 RVA: 0x0001BDEB File Offset: 0x00019FEB
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultBelts
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE2 RID: 3298
		// (get) Token: 0x06002B0C RID: 11020 RVA: 0x0001BDF3 File Offset: 0x00019FF3
		// (set) Token: 0x06002B0D RID: 11021 RVA: 0x0001BDFA File Offset: 0x00019FFA
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultBoots
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE3 RID: 3299
		// (get) Token: 0x06002B0E RID: 11022 RVA: 0x0001BE02 File Offset: 0x0001A002
		// (set) Token: 0x06002B0F RID: 11023 RVA: 0x0001BE09 File Offset: 0x0001A009
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultBracers
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE4 RID: 3300
		// (get) Token: 0x06002B10 RID: 11024 RVA: 0x0001BE11 File Offset: 0x0001A011
		// (set) Token: 0x06002B11 RID: 11025 RVA: 0x0001BE18 File Offset: 0x0001A018
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultCloaks
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE5 RID: 3301
		// (get) Token: 0x06002B12 RID: 11026 RVA: 0x0001BE20 File Offset: 0x0001A020
		// (set) Token: 0x06002B13 RID: 11027 RVA: 0x0001BE27 File Offset: 0x0001A027
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultGloves
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE6 RID: 3302
		// (get) Token: 0x06002B14 RID: 11028 RVA: 0x0001BE2F File Offset: 0x0001A02F
		// (set) Token: 0x06002B15 RID: 11029 RVA: 0x0001BE36 File Offset: 0x0001A036
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultHelms
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE7 RID: 3303
		// (get) Token: 0x06002B16 RID: 11030 RVA: 0x0001BE3E File Offset: 0x0001A03E
		// (set) Token: 0x06002B17 RID: 11031 RVA: 0x0001BE45 File Offset: 0x0001A045
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultPants
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE8 RID: 3304
		// (get) Token: 0x06002B18 RID: 11032 RVA: 0x0001BE4D File Offset: 0x0001A04D
		// (set) Token: 0x06002B19 RID: 11033 RVA: 0x0001BE54 File Offset: 0x0001A054
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultShoulders
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CE9 RID: 3305
		// (get) Token: 0x06002B1A RID: 11034 RVA: 0x0001BE5C File Offset: 0x0001A05C
		// (set) Token: 0x06002B1B RID: 11035 RVA: 0x0001BE63 File Offset: 0x0001A063
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultAmulets
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CEA RID: 3306
		// (get) Token: 0x06002B1C RID: 11036 RVA: 0x0001BE6B File Offset: 0x0001A06B
		// (set) Token: 0x06002B1D RID: 11037 RVA: 0x0001BE72 File Offset: 0x0001A072
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultRings
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CEB RID: 3307
		// (get) Token: 0x06002B1E RID: 11038 RVA: 0x0001BE7A File Offset: 0x0001A07A
		// (set) Token: 0x06002B1F RID: 11039 RVA: 0x0001BE81 File Offset: 0x0001A081
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] DefaultTrinket
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CEC RID: 3308
		// (get) Token: 0x06002B20 RID: 11040 RVA: 0x0001BE89 File Offset: 0x0001A089
		// (set) Token: 0x06002B21 RID: 11041 RVA: 0x0001BE90 File Offset: 0x0001A090
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})]
		public static global::System.Collections.Generic.List<global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]> DefaultEquipment
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			get
			{
				return default(global::System.Collections.Generic.List<global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[]>);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"ItemLevel",
				"EquipmentIDs"
			})]
			set
			{
			}
		}

		// Token: 0x17000CED RID: 3309
		// (get) Token: 0x06002B22 RID: 11042 RVA: 0x0001BE98 File Offset: 0x0001A098
		// (set) Token: 0x06002B23 RID: 11043 RVA: 0x0001BE9F File Offset: 0x0001A09F
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"Offensive",
			"Defensive",
			"Utility"
		})]
		public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ImbuementType, global::System.Collections.Generic.Dictionary<global::System.ValueTuple<byte, byte, byte>, global::LootClicker.Items.Equipment.EquipmentID>> ImbueStorage
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"Offensive",
				"Defensive",
				"Utility"
			})]
			get
			{
				return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ImbuementType, global::System.Collections.Generic.Dictionary<global::System.ValueTuple<byte, byte, byte>, global::LootClicker.Items.Equipment.EquipmentID>>);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"Offensive",
				"Defensive",
				"Utility"
			})]
			set
			{
			}
		}

		// Token: 0x17000CEE RID: 3310
		// (get) Token: 0x06002B24 RID: 11044 RVA: 0x0001BEA7 File Offset: 0x0001A0A7
		// (set) Token: 0x06002B25 RID: 11045 RVA: 0x0001BEAE File Offset: 0x0001A0AE
		[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"Offensive",
			"Defensive",
			"Utility"
		})]
		public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ImbuementType, global::System.Collections.Generic.Dictionary<global::System.ValueTuple<byte, byte, byte>, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>> FullImbueStorage
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"Offensive",
				"Defensive",
				"Utility"
			})]
			get
			{
				return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ImbuementType, global::System.Collections.Generic.Dictionary<global::System.ValueTuple<byte, byte, byte>, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>>);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"Offensive",
				"Defensive",
				"Utility"
			})]
			set
			{
			}
		}

		// Token: 0x17000CEF RID: 3311
		// (get) Token: 0x06002B26 RID: 11046 RVA: 0x0001BEB6 File Offset: 0x0001A0B6
		// (set) Token: 0x06002B27 RID: 11047 RVA: 0x0001BEBD File Offset: 0x0001A0BD
		public static global::LootClicker.Items.Equipment.EquipmentType[] ArmourTypes
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			get
			{
				return default(global::LootClicker.Items.Equipment.EquipmentType[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			set
			{
			}
		}

		// Token: 0x17000CF0 RID: 3312
		// (get) Token: 0x06002B28 RID: 11048 RVA: 0x0001BEC5 File Offset: 0x0001A0C5
		// (set) Token: 0x06002B29 RID: 11049 RVA: 0x0001BECC File Offset: 0x0001A0CC
		public static global::LootClicker.Items.Equipment.EquipmentType[] AccessoryTypes
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			get
			{
				return default(global::LootClicker.Items.Equipment.EquipmentType[]);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			set
			{
			}
		}

		// Token: 0x17000CF1 RID: 3313
		// (get) Token: 0x06002B2A RID: 11050 RVA: 0x0001BED4 File Offset: 0x0001A0D4
		// (set) Token: 0x06002B2B RID: 11051 RVA: 0x0001BEDB File Offset: 0x0001A0DB
		public static global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> GlobalOffensiveAttributes
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			get
			{
				return default(global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat>);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			set
			{
			}
		}

		// Token: 0x17000CF2 RID: 3314
		// (get) Token: 0x06002B2C RID: 11052 RVA: 0x0001BEE3 File Offset: 0x0001A0E3
		// (set) Token: 0x06002B2D RID: 11053 RVA: 0x0001BEEA File Offset: 0x0001A0EA
		public static global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> GlobalDefensiveAttributes
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			get
			{
				return default(global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat>);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			set
			{
			}
		}

		// Token: 0x17000CF3 RID: 3315
		// (get) Token: 0x06002B2E RID: 11054 RVA: 0x0001BEF2 File Offset: 0x0001A0F2
		// (set) Token: 0x06002B2F RID: 11055 RVA: 0x0001BEF9 File Offset: 0x0001A0F9
		public static global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> GlobalUtilityAttributes
		{
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			get
			{
				return default(global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat>);
			}
			[global::System.Runtime.CompilerServices.CompilerGenerated]
			set
			{
			}
		}

		// Token: 0x06002B30 RID: 11056 RVA: 0x0001BF01 File Offset: 0x0001A101
		public static void SetupEquipmentBases()
		{
		}

		// Token: 0x06002B31 RID: 11057 RVA: 0x000CB918 File Offset: 0x000C9B18
		private static void SetupDefaultItems()
		{
		}

		// Token: 0x06002B32 RID: 11058 RVA: 0x000CC7CC File Offset: 0x000CA9CC
		private static void SetupFullImbueStorage()
		{
		}

		// Token: 0x06002B33 RID: 11059 RVA: 0x000CC984 File Offset: 0x000CAB84
		private static void SetupImbueStorage()
		{
		}

		// Token: 0x06002B34 RID: 11060 RVA: 0x000CCBB0 File Offset: 0x000CADB0
		private static void AddImbueSet(global::LootClicker.Items.Equipment.ImbuementType imbuementType, global::LootClicker.Items.Equipment.EquipmentID[] items)
		{
		}

		// Token: 0x06002B35 RID: 11061 RVA: 0x000CCC30 File Offset: 0x000CAE30
		private static void SetupGlobalAttributes()
		{
		}

		// Token: 0x06002B36 RID: 11062 RVA: 0x000CCD74 File Offset: 0x000CAF74
		public static global::LootClicker.Items.Rarity GetRarity(double magicFind)
		{
			return default(global::LootClicker.Items.Rarity);
		}

		// Token: 0x06002B37 RID: 11063 RVA: 0x000CCDF0 File Offset: 0x000CAFF0
		public static int GetNumItems(double baseChance, double fortune)
		{
			return default(int);
		}

		// Token: 0x06002B38 RID: 11064 RVA: 0x0001BF3F File Offset: 0x0001A13F
		public static int GetLuckForRarity(global::LootClicker.Items.Rarity rarity)
		{
			return default(int);
		}

		// Token: 0x06002B39 RID: 11065 RVA: 0x000CCE4C File Offset: 0x000CB04C
		public static float GetRarityMulti(global::LootClicker.Items.Rarity rarity)
		{
			return default(float);
		}

		// Token: 0x06002B3A RID: 11066 RVA: 0x000CCEA4 File Offset: 0x000CB0A4
		public static global::LootClicker.Items.Equipment.EquipmentType[] GetEquipmentTypeForString(string searchText)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentType[]);
		}

		// Token: 0x06002B3B RID: 11067 RVA: 0x000CCF44 File Offset: 0x000CB144
		public static global::LootClicker.Items.Equipment.EquipmentType[] GetEquipmentTypeForString(string[] searchNames)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentType[]);
		}

		// Token: 0x06002B3C RID: 11068 RVA: 0x000CCFF8 File Offset: 0x000CB1F8
		public static byte RollParagonLevel(int paragonLevelChance, int maxParagonLevel)
		{
			return default(byte);
		}

		// Token: 0x06002B3D RID: 11069 RVA: 0x000CD038 File Offset: 0x000CB238
		public static bool CheckDistributionCompatability(global::LootClicker.Items.EquipableItem primaryItem, global::LootClicker.Items.EquipableItem sacrificeItem)
		{
			return default(bool);
		}

		// Token: 0x06002B3E RID: 11070 RVA: 0x000CD0F4 File Offset: 0x000CB2F4
		public static global::LootClicker.Items.Equipment.ImbuementType GetImbuementType(global::LootClicker.Items.EquipableItem equipableItem)
		{
			return default(global::LootClicker.Items.Equipment.ImbuementType);
		}

		// Token: 0x06002B3F RID: 11071 RVA: 0x000CD124 File Offset: 0x000CB324
		public static void UpdateImbuementStorage(global::LootClicker.Items.Equipment.EquipmentID equipmentID, byte additionalStorage)
		{
		}

		// Token: 0x06002B40 RID: 11072 RVA: 0x000CD150 File Offset: 0x000CB350
		public static void UpdateImbuementStorage(global::LootClicker.Items.EquipmentBase equipmentBase, byte additionalStorage)
		{
		}

		// Token: 0x06002B41 RID: 11073 RVA: 0x000CD1B0 File Offset: 0x000CB3B0
		public static global::LootClicker.Items.Equipment.EquipmentID GetItemRoll([global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ID",
			"Weight"
		})] global::System.ValueTuple<global::LootClicker.Items.Equipment.EquipmentID, int>[] itemRolls, int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B42 RID: 11074 RVA: 0x000CD234 File Offset: 0x000CB434
		public static global::LootClicker.Items.Equipment.EquipmentID GetItemRoll([global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ID",
			"Weight"
		})] global::System.Collections.Generic.List<global::System.ValueTuple<global::LootClicker.Items.Equipment.EquipmentID, int>> itemRolls, int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B43 RID: 11075 RVA: 0x000CD2C4 File Offset: 0x000CB4C4
		private static global::LootClicker.Items.Equipment.EquipmentID GetItemFromWeights([global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ID",
			"Weight"
		})] global::System.Collections.Generic.List<global::System.ValueTuple<global::LootClicker.Items.Equipment.EquipmentID, int>> itemWeights, int itemLevel, int maxWeight, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B44 RID: 11076 RVA: 0x000CD3B4 File Offset: 0x000CB5B4
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultWeaponRoll(int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B45 RID: 11077 RVA: 0x0001BF74 File Offset: 0x0001A174
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultArmourRoll(int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B46 RID: 11078 RVA: 0x0001BF90 File Offset: 0x0001A190
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultAccessoryRoll(int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B47 RID: 11079 RVA: 0x000CD4E8 File Offset: 0x000CB6E8
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultOffhandRoll(int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B48 RID: 11080 RVA: 0x000CD61C File Offset: 0x000CB81C
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultRelicRoll(int itemLevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B49 RID: 11081 RVA: 0x000CD6F4 File Offset: 0x000CB8F4
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultFineGem()
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B4A RID: 11082 RVA: 0x000CD80C File Offset: 0x000CBA0C
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultFineUniqueGem()
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B4B RID: 11083 RVA: 0x000CD8C8 File Offset: 0x000CBAC8
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultEquipmentRoll(global::LootClicker.Items.Equipment.EquipmentType equipmentType, int itemlevel, global::LootClicker.Entities.Encounter encounter = null)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B4C RID: 11084 RVA: 0x000CD9C0 File Offset: 0x000CBBC0
		public static global::LootClicker.Items.Equipment.EquipmentID GetDefaultID(int itemLevel, [global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ItemLevel",
			"EquipmentIDs"
		})] global::System.ValueTuple<int, global::LootClicker.Items.Equipment.EquipmentID[]>[] equipmentIDs)
		{
			return default(global::LootClicker.Items.Equipment.EquipmentID);
		}

		// Token: 0x06002B4D RID: 11085 RVA: 0x0001BFAC File Offset: 0x0001A1AC
		public static global::LootClicker.Items.EquipableItem GenerateItem(global::LootClicker.Items.Equipment.EquipmentID id, int itemLevel, double magicFind, global::LootClicker.Entities.Encounter encounter = null, bool skipGlossary = false)
		{
			return default(global::LootClicker.Items.EquipableItem);
		}

		// Token: 0x06002B4E RID: 11086 RVA: 0x000CDA20 File Offset: 0x000CBC20
		public static global::LootClicker.Items.EquipableItem GenerateItem(global::LootClicker.Items.Equipment.EquipmentID id, int itemLevel, global::LootClicker.Items.Rarity rarity, global::LootClicker.Entities.Encounter encounter = null, bool skipGlossary = false)
		{
			return default(global::LootClicker.Items.EquipableItem);
		}

		// Token: 0x06002B4F RID: 11087 RVA: 0x000CDAE0 File Offset: 0x000CBCE0
		public static bool GenerateItemDrops([global::System.Runtime.CompilerServices.TupleElementNames(new string[]
		{
			"ID",
			"Weight"
		})] global::System.Collections.Generic.List<global::System.ValueTuple<global::LootClicker.Items.Equipment.EquipmentID, int>> dropWeights, int numDrops, int magicFind, int itemLevel, global::LootClicker.Entities.Encounter encounter = null, int nemesisChance = 0, int paragonChance = 0, int paragonUpgradeChance = 0, byte maxParagonLevel = 0)
		{
			return default(bool);
		}

		// Token: 0x06002B50 RID: 11088 RVA: 0x000CDB3C File Offset: 0x000CBD3C
		public static bool GenerateItemDrop(global::LootClicker.Items.Equipment.EquipmentID itemID, global::LootClicker.Items.Rarity rarity, int itemLevel, global::LootClicker.Entities.Encounter encounter = null, bool overrideFilter = false, int nemesisChance = 0, global::LootClicker.Items.EnchantID enchantID = global::LootClicker.Items.EnchantID.None, int paragonChance = 0, int paragonUpgrageChance = 0, byte maxParagonLevel = 0)
		{
			return default(bool);
		}

		// Token: 0x06002B51 RID: 11089 RVA: 0x0001BFBE File Offset: 0x0001A1BE
		public static void GatherAttributeLists(global::LootClicker.Items.EquipableItem item, ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> offensiveAttributes, ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> defensiveAttributes, ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> utilityAttributes, bool ignoreArchetype = false)
		{
		}

		// Token: 0x06002B52 RID: 11090 RVA: 0x000CDCD8 File Offset: 0x000CBED8
		public static void RemoveAttributesForArchetype(global::LootClicker.Items.Equipment.EquipmentArchetype archetype, ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> offensiveAttributes, ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> defensiveAttributes, ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> utilityAttributes)
		{
		}

		// Token: 0x06002B53 RID: 11091 RVA: 0x000CDF9C File Offset: 0x000CC19C
		public static void RemoveAttributeConflicts(ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> availableAttributes, global::LootClicker.Items.ConflictType[] conflicts)
		{
		}

		// Token: 0x06002B54 RID: 11092 RVA: 0x000CDFCC File Offset: 0x000CC1CC
		public static void RemoveAttributeConflicts(ref global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> availableAttributes, global::LootClicker.Items.ConflictType conflictType)
		{
		}

		// Token: 0x06002B55 RID: 11093 RVA: 0x000CE164 File Offset: 0x000CC364
		public static int GenerateSockets(int itemLevel, int maxSockets)
		{
			return default(int);
		}

		// Token: 0x06002B56 RID: 11094 RVA: 0x000CE1C0 File Offset: 0x000CC3C0
		public static void DiscoverDefaultEquipment(int oldLevel, int newLevel)
		{
		}

		// Token: 0x06002B57 RID: 11095 RVA: 0x0001BFE7 File Offset: 0x0001A1E7
		// Note: this type is marked as 'beforefieldinit'.
		static Equipment()
		{
		}

		// Token: 0x04001B20 RID: 6944
		public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.EquipmentID, global::LootClicker.Items.EquipmentBase> Database;

		// Token: 0x04001B38 RID: 6968
		public const int T1Level = 15;

		// Token: 0x04001B39 RID: 6969
		public const int T2Level = 50;

		// Token: 0x04001B3A RID: 6970
		public const int T3Level = 100;

		// Token: 0x04001B3B RID: 6971
		public const int T4Level = 125;

		// Token: 0x04001B3C RID: 6972
		public const int T5Level = 150;

		// Token: 0x04001B3D RID: 6973
		public const int T6Level = 999;

		// Token: 0x04001B3E RID: 6974
		public const int AllResistanceBase = 30;

		// Token: 0x04001B3F RID: 6975
		public const double AllResistanceIncrement = 0.1;

		// Token: 0x04001B40 RID: 6976
		public const int ResistanceBase = 60;

		// Token: 0x04001B41 RID: 6977
		public const double ResistanceIncrement = 0.2;

		// Token: 0x04001B42 RID: 6978
		public const int SpecificResistanceBase = 120;

		// Token: 0x04001B43 RID: 6979
		public const double SpecificResistanceIncrement = 0.4;

		// Token: 0x02000392 RID: 914
		public static class AccessoryBases
		{
			// Token: 0x17000CF4 RID: 3316
			// (get) Token: 0x06002B58 RID: 11096 RVA: 0x0001BFF3 File Offset: 0x0001A1F3
			// (set) Token: 0x06002B59 RID: 11097 RVA: 0x0001BFFA File Offset: 0x0001A1FA
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>> AccessoryDatabase
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CF5 RID: 3317
			// (get) Token: 0x06002B5A RID: 11098 RVA: 0x0001C002 File Offset: 0x0001A202
			// (set) Token: 0x06002B5B RID: 11099 RVA: 0x0001C009 File Offset: 0x0001A209
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::LootClicker.Items.AttributeStat[]> OffensiveAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CF6 RID: 3318
			// (get) Token: 0x06002B5C RID: 11100 RVA: 0x0001C011 File Offset: 0x0001A211
			// (set) Token: 0x06002B5D RID: 11101 RVA: 0x0001C018 File Offset: 0x0001A218
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::LootClicker.Items.AttributeStat[]> DefensiveAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CF7 RID: 3319
			// (get) Token: 0x06002B5E RID: 11102 RVA: 0x0001C020 File Offset: 0x0001A220
			// (set) Token: 0x06002B5F RID: 11103 RVA: 0x0001C027 File Offset: 0x0001A227
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::LootClicker.Items.AttributeStat[]> UtilityAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x06002B60 RID: 11104 RVA: 0x0001C02F File Offset: 0x0001A22F
			internal static void Setup()
			{
			}

			// Token: 0x06002B61 RID: 11105 RVA: 0x0001C068 File Offset: 0x0001A268
			public static global::LootClicker.Items.Equipment.EquipmentType GetEquipmentType(global::LootClicker.Items.Equipment.AccessoryBases.AccessoryTypes type)
			{
				return default(global::LootClicker.Items.Equipment.EquipmentType);
			}

			// Token: 0x06002B62 RID: 11106 RVA: 0x0001C087 File Offset: 0x0001A287
			private static void AddToDatabase(global::LootClicker.Items.AccessoryBase accessoryBase)
			{
			}

			// Token: 0x06002B63 RID: 11107 RVA: 0x000CE310 File Offset: 0x000CC510
			// Note: this type is marked as 'beforefieldinit'.
			static AccessoryBases()
			{
			}

			// Token: 0x04001B4B RID: 6987
			public const int T1AttributeValue = 10;

			// Token: 0x04001B4C RID: 6988
			public const int T2AttributeValue = 20;

			// Token: 0x04001B4D RID: 6989
			public const int T3AttributeValue = 30;

			// Token: 0x04001B4E RID: 6990
			public const int T4AttributeValue = 40;

			// Token: 0x04001B4F RID: 6991
			public const int T5AttributeValue = 50;

			// Token: 0x04001B50 RID: 6992
			public const int T6AttributeValue = 60;

			// Token: 0x04001B51 RID: 6993
			public static readonly global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID> AccessoryAugments;

			// Token: 0x02000393 RID: 915
			public enum AccessoryTypes
			{
				// Token: 0x04001B53 RID: 6995
				Ring,
				// Token: 0x04001B54 RID: 6996
				Amulet,
				// Token: 0x04001B55 RID: 6997
				Trinket
			}

			// Token: 0x02000394 RID: 916
			public static class Amulets
			{
				// Token: 0x06002B64 RID: 11108 RVA: 0x000CE410 File Offset: 0x000CC610
				internal static void Setup()
				{
				}
			}

			// Token: 0x02000395 RID: 917
			public static class Rings
			{
				// Token: 0x06002B65 RID: 11109 RVA: 0x000CF220 File Offset: 0x000CD420
				internal static void Setup()
				{
				}
			}

			// Token: 0x02000396 RID: 918
			public static class Trinkets
			{
				// Token: 0x06002B66 RID: 11110 RVA: 0x000D05B4 File Offset: 0x000CE7B4
				internal static void Setup()
				{
				}
			}
		}

		// Token: 0x02000397 RID: 919
		public static class ArmourBases
		{
			// Token: 0x17000CF8 RID: 3320
			// (get) Token: 0x06002B67 RID: 11111 RVA: 0x0001C0B8 File Offset: 0x0001A2B8
			// (set) Token: 0x06002B68 RID: 11112 RVA: 0x0001C0BF File Offset: 0x0001A2BF
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>> ArmourDatabase
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CF9 RID: 3321
			// (get) Token: 0x06002B69 RID: 11113 RVA: 0x0001C0C7 File Offset: 0x0001A2C7
			// (set) Token: 0x06002B6A RID: 11114 RVA: 0x0001C0CE File Offset: 0x0001A2CE
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::LootClicker.Items.AttributeStat[]> OffensiveAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CFA RID: 3322
			// (get) Token: 0x06002B6B RID: 11115 RVA: 0x0001C0D6 File Offset: 0x0001A2D6
			// (set) Token: 0x06002B6C RID: 11116 RVA: 0x0001C0DD File Offset: 0x0001A2DD
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::LootClicker.Items.AttributeStat[]> DefensiveAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CFB RID: 3323
			// (get) Token: 0x06002B6D RID: 11117 RVA: 0x0001C0E5 File Offset: 0x0001A2E5
			// (set) Token: 0x06002B6E RID: 11118 RVA: 0x0001C0EC File Offset: 0x0001A2EC
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::LootClicker.Items.AttributeStat[]> UtilityAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x06002B6F RID: 11119 RVA: 0x000D142C File Offset: 0x000CF62C
			internal static void Setup()
			{
			}

			// Token: 0x06002B70 RID: 11120 RVA: 0x000D1490 File Offset: 0x000CF690
			public static int GetSocketsForType(global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes type)
			{
				return default(int);
			}

			// Token: 0x06002B71 RID: 11121 RVA: 0x000D14DC File Offset: 0x000CF6DC
			public static global::LootClicker.Items.Equipment.EquipmentType GetEquipmentType(global::LootClicker.Items.Equipment.ArmourBases.ArmourTypes type)
			{
				return default(global::LootClicker.Items.Equipment.EquipmentType);
			}

			// Token: 0x06002B72 RID: 11122 RVA: 0x0001C0F4 File Offset: 0x0001A2F4
			private static void AddToDatabase(global::LootClicker.Items.ArmourBase armourBase)
			{
			}

			// Token: 0x06002B73 RID: 11123 RVA: 0x000D1528 File Offset: 0x000CF728
			public static global::LootClicker.Items.Equipment.ArmourBases.ArmourSubClass[] GetArmourSubClassForString(string searchText)
			{
				return default(global::LootClicker.Items.Equipment.ArmourBases.ArmourSubClass[]);
			}

			// Token: 0x06002B74 RID: 11124 RVA: 0x000D15C8 File Offset: 0x000CF7C8
			public static global::LootClicker.Items.Equipment.ArmourBases.ArmourSubClass[] GetArmourSubClassForString(string[] searchNames)
			{
				return default(global::LootClicker.Items.Equipment.ArmourBases.ArmourSubClass[]);
			}

			// Token: 0x06002B75 RID: 11125 RVA: 0x000D167C File Offset: 0x000CF87C
			// Note: this type is marked as 'beforefieldinit'.
			static ArmourBases()
			{
			}

			// Token: 0x04001B56 RID: 6998
			public const int T2DamageBase = 20;

			// Token: 0x04001B57 RID: 6999
			public const int T2DamageIncrement = 2;

			// Token: 0x04001B58 RID: 7000
			public const int T3DamageBase = 30;

			// Token: 0x04001B59 RID: 7001
			public const int T3DamageIncrement = 3;

			// Token: 0x04001B5A RID: 7002
			public const int T4DamageBase = 40;

			// Token: 0x04001B5B RID: 7003
			public const int T4DamageIncrement = 4;

			// Token: 0x04001B5C RID: 7004
			public const int T2BarrierBase = 2;

			// Token: 0x04001B5D RID: 7005
			public const double T2BarrierIncrement = 0.5;

			// Token: 0x04001B5E RID: 7006
			public const int T3BarrierBase = 3;

			// Token: 0x04001B5F RID: 7007
			public const double T3BarrierIncrement = 0.5;

			// Token: 0x04001B60 RID: 7008
			public const int T4BarrierBase = 4;

			// Token: 0x04001B61 RID: 7009
			public const double T4BarrierIncrement = 0.5;

			// Token: 0x04001B62 RID: 7010
			public const int T2HealthBase = 10;

			// Token: 0x04001B63 RID: 7011
			public const int T2HealthIncrement = 1;

			// Token: 0x04001B64 RID: 7012
			public const int T3HealthBase = 15;

			// Token: 0x04001B65 RID: 7013
			public const double T3HealthIncrement = 1.5;

			// Token: 0x04001B66 RID: 7014
			public const int T4HealthBase = 20;

			// Token: 0x04001B67 RID: 7015
			public const int T4HealthIncrement = 2;

			// Token: 0x04001B68 RID: 7016
			public const int T2ResistanceBase = 20;

			// Token: 0x04001B69 RID: 7017
			public const double T2ResistanceIncrement = 0.1;

			// Token: 0x04001B6A RID: 7018
			public const int T3ResistanceBase = 30;

			// Token: 0x04001B6B RID: 7019
			public const double T3ResistanceIncrement = 0.15;

			// Token: 0x04001B6C RID: 7020
			public const int T4ResistanceBase = 40;

			// Token: 0x04001B6D RID: 7021
			public const double T4ResistanceIncrement = 0.2;

			// Token: 0x04001B6E RID: 7022
			public const int T2AttackSpeed = 20;

			// Token: 0x04001B6F RID: 7023
			public const int T3AttackSpeed = 30;

			// Token: 0x04001B70 RID: 7024
			public const int T4AttackSpeed = 40;

			// Token: 0x04001B71 RID: 7025
			public const int T2CriticalChance = 20;

			// Token: 0x04001B72 RID: 7026
			public const int T3CriticalChance = 30;

			// Token: 0x04001B73 RID: 7027
			public const int T4CriticalChance = 40;

			// Token: 0x04001B74 RID: 7028
			public const int T2CriticalDamage = 100;

			// Token: 0x04001B75 RID: 7029
			public const int T3CriticalDamage = 150;

			// Token: 0x04001B76 RID: 7030
			public const int T4CriticalDamage = 200;

			// Token: 0x04001B7B RID: 7035
			public static readonly global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID> ArmourAugments;

			// Token: 0x02000398 RID: 920
			public enum ArmourTypes
			{
				// Token: 0x04001B7D RID: 7037
				Chest,
				// Token: 0x04001B7E RID: 7038
				Belt,
				// Token: 0x04001B7F RID: 7039
				Boot,
				// Token: 0x04001B80 RID: 7040
				Bracer,
				// Token: 0x04001B81 RID: 7041
				Cloak,
				// Token: 0x04001B82 RID: 7042
				Glove,
				// Token: 0x04001B83 RID: 7043
				Helm,
				// Token: 0x04001B84 RID: 7044
				Shoulder,
				// Token: 0x04001B85 RID: 7045
				Pants
			}

			// Token: 0x02000399 RID: 921
			public enum ArmourSubClass
			{
				// Token: 0x04001B87 RID: 7047
				Light,
				// Token: 0x04001B88 RID: 7048
				Medium,
				// Token: 0x04001B89 RID: 7049
				Heavy
			}

			// Token: 0x0200039A RID: 922
			public static class Chests
			{
				// Token: 0x06002B76 RID: 11126 RVA: 0x000D1838 File Offset: 0x000CFA38
				internal static void Setup()
				{
				}

				// Token: 0x06002B77 RID: 11127 RVA: 0x000D2C54 File Offset: 0x000D0E54
				// Note: this type is marked as 'beforefieldinit'.
				static Chests()
				{
				}

				// Token: 0x04001B8A RID: 7050
				public const int MaxSockets = 4;

				// Token: 0x04001B8B RID: 7051
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001B8C RID: 7052
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001B8D RID: 7053
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x0200039B RID: 923
			public static class Belts
			{
				// Token: 0x06002B78 RID: 11128 RVA: 0x000D2CD0 File Offset: 0x000D0ED0
				internal static void Setup()
				{
				}

				// Token: 0x06002B79 RID: 11129 RVA: 0x000D3F40 File Offset: 0x000D2140
				// Note: this type is marked as 'beforefieldinit'.
				static Belts()
				{
				}

				// Token: 0x04001B8E RID: 7054
				public const int MaxSockets = 1;

				// Token: 0x04001B8F RID: 7055
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001B90 RID: 7056
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001B91 RID: 7057
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x0200039C RID: 924
			public static class Boots
			{
				// Token: 0x06002B7A RID: 11130 RVA: 0x000D3FBC File Offset: 0x000D21BC
				internal static void Setup()
				{
				}

				// Token: 0x06002B7B RID: 11131 RVA: 0x000D53E0 File Offset: 0x000D35E0
				// Note: this type is marked as 'beforefieldinit'.
				static Boots()
				{
				}

				// Token: 0x04001B92 RID: 7058
				public const int MaxSockets = 2;

				// Token: 0x04001B93 RID: 7059
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001B94 RID: 7060
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001B95 RID: 7061
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x0200039D RID: 925
			public static class Bracers
			{
				// Token: 0x06002B7C RID: 11132 RVA: 0x000D545C File Offset: 0x000D365C
				internal static void Setup()
				{
				}

				// Token: 0x06002B7D RID: 11133 RVA: 0x000D6688 File Offset: 0x000D4888
				// Note: this type is marked as 'beforefieldinit'.
				static Bracers()
				{
				}

				// Token: 0x04001B96 RID: 7062
				public const int MaxSockets = 1;

				// Token: 0x04001B97 RID: 7063
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001B98 RID: 7064
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001B99 RID: 7065
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x0200039E RID: 926
			public static class Cloaks
			{
				// Token: 0x06002B7E RID: 11134 RVA: 0x000D6704 File Offset: 0x000D4904
				internal static void Setup()
				{
				}

				// Token: 0x06002B7F RID: 11135 RVA: 0x000D7860 File Offset: 0x000D5A60
				// Note: this type is marked as 'beforefieldinit'.
				static Cloaks()
				{
				}

				// Token: 0x04001B9A RID: 7066
				public const int MaxSockets = 1;

				// Token: 0x04001B9B RID: 7067
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001B9C RID: 7068
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001B9D RID: 7069
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x0200039F RID: 927
			public static class Gloves
			{
				// Token: 0x06002B80 RID: 11136 RVA: 0x000D78DC File Offset: 0x000D5ADC
				internal static void Setup()
				{
				}

				// Token: 0x06002B81 RID: 11137 RVA: 0x000D8C48 File Offset: 0x000D6E48
				// Note: this type is marked as 'beforefieldinit'.
				static Gloves()
				{
				}

				// Token: 0x04001B9E RID: 7070
				public const int MaxSockets = 2;

				// Token: 0x04001B9F RID: 7071
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001BA0 RID: 7072
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001BA1 RID: 7073
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x020003A0 RID: 928
			public static class Helms
			{
				// Token: 0x06002B82 RID: 11138 RVA: 0x000D8CC4 File Offset: 0x000D6EC4
				internal static void Setup()
				{
				}

				// Token: 0x06002B83 RID: 11139 RVA: 0x000D9FD4 File Offset: 0x000D81D4
				// Note: this type is marked as 'beforefieldinit'.
				static Helms()
				{
				}

				// Token: 0x04001BA2 RID: 7074
				public const int MaxSockets = 3;

				// Token: 0x04001BA3 RID: 7075
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001BA4 RID: 7076
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001BA5 RID: 7077
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x020003A1 RID: 929
			public static class Shoulders
			{
				// Token: 0x06002B84 RID: 11140 RVA: 0x000DA050 File Offset: 0x000D8250
				internal static void Setup()
				{
				}

				// Token: 0x06002B85 RID: 11141 RVA: 0x000DB300 File Offset: 0x000D9500
				// Note: this type is marked as 'beforefieldinit'.
				static Shoulders()
				{
				}

				// Token: 0x04001BA6 RID: 7078
				public const int MaxSockets = 2;

				// Token: 0x04001BA7 RID: 7079
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001BA8 RID: 7080
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001BA9 RID: 7081
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}

			// Token: 0x020003A2 RID: 930
			public static class Pants
			{
				// Token: 0x06002B86 RID: 11142 RVA: 0x000DB37C File Offset: 0x000D957C
				internal static void Setup()
				{
				}

				// Token: 0x06002B87 RID: 11143 RVA: 0x000DC798 File Offset: 0x000DA998
				// Note: this type is marked as 'beforefieldinit'.
				static Pants()
				{
				}

				// Token: 0x04001BAA RID: 7082
				public const int MaxSockets = 4;

				// Token: 0x04001BAB RID: 7083
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultHeavyStats;

				// Token: 0x04001BAC RID: 7084
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultMediumStats;

				// Token: 0x04001BAD RID: 7085
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"Stat",
					"Value"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.AttributeStat, int>[] DefaultLightStats;
			}
		}

		// Token: 0x020003A3 RID: 931
		public enum BaseType
		{
			// Token: 0x04001BAF RID: 7087
			WeaponBase,
			// Token: 0x04001BB0 RID: 7088
			ArmourBase,
			// Token: 0x04001BB1 RID: 7089
			AccessoryBase,
			// Token: 0x04001BB2 RID: 7090
			ShieldBase,
			// Token: 0x04001BB3 RID: 7091
			QuiverBase,
			// Token: 0x04001BB4 RID: 7092
			WardBase,
			// Token: 0x04001BB5 RID: 7093
			GemBase,
			// Token: 0x04001BB6 RID: 7094
			RelicBase
		}

		// Token: 0x020003A4 RID: 932
		public enum EquipmentType
		{
			// Token: 0x04001BB8 RID: 7096
			Weapon,
			// Token: 0x04001BB9 RID: 7097
			Helm,
			// Token: 0x04001BBA RID: 7098
			Shoulder,
			// Token: 0x04001BBB RID: 7099
			Chest,
			// Token: 0x04001BBC RID: 7100
			Bracers,
			// Token: 0x04001BBD RID: 7101
			Gloves,
			// Token: 0x04001BBE RID: 7102
			Belt,
			// Token: 0x04001BBF RID: 7103
			Pants,
			// Token: 0x04001BC0 RID: 7104
			Boots,
			// Token: 0x04001BC1 RID: 7105
			Amulet,
			// Token: 0x04001BC2 RID: 7106
			Ring,
			// Token: 0x04001BC3 RID: 7107
			Trinket,
			// Token: 0x04001BC4 RID: 7108
			Cloak,
			// Token: 0x04001BC5 RID: 7109
			Relic,
			// Token: 0x04001BC6 RID: 7110
			Offhand,
			// Token: 0x04001BC7 RID: 7111
			NotEquipable,
			// Token: 0x04001BC8 RID: 7112
			Gem
		}

		// Token: 0x020003A5 RID: 933
		public enum ImbuementType
		{
			// Token: 0x04001BCA RID: 7114
			None,
			// Token: 0x04001BCB RID: 7115
			Chest,
			// Token: 0x04001BCC RID: 7116
			Belt,
			// Token: 0x04001BCD RID: 7117
			Boots,
			// Token: 0x04001BCE RID: 7118
			Bracers,
			// Token: 0x04001BCF RID: 7119
			Cloak,
			// Token: 0x04001BD0 RID: 7120
			Gloves,
			// Token: 0x04001BD1 RID: 7121
			Helm,
			// Token: 0x04001BD2 RID: 7122
			Shoulders,
			// Token: 0x04001BD3 RID: 7123
			Pants,
			// Token: 0x04001BD4 RID: 7124
			Amulet,
			// Token: 0x04001BD5 RID: 7125
			Ring,
			// Token: 0x04001BD6 RID: 7126
			Trinket,
			// Token: 0x04001BD7 RID: 7127
			Shield,
			// Token: 0x04001BD8 RID: 7128
			Quiver,
			// Token: 0x04001BD9 RID: 7129
			Ward,
			// Token: 0x04001BDA RID: 7130
			Melee1H,
			// Token: 0x04001BDB RID: 7131
			Melee2H,
			// Token: 0x04001BDC RID: 7132
			Ranged1H,
			// Token: 0x04001BDD RID: 7133
			Ranged2H,
			// Token: 0x04001BDE RID: 7134
			Magic1H,
			// Token: 0x04001BDF RID: 7135
			Magic2H
		}

		// Token: 0x020003A6 RID: 934
		public enum EquipmentID
		{
			// Token: 0x04001BE1 RID: 7137
			Undefined,
			// Token: 0x04001BE2 RID: 7138
			DefaultWeapon,
			// Token: 0x04001BE3 RID: 7139
			DefaultArmour,
			// Token: 0x04001BE4 RID: 7140
			DefaultAccessory,
			// Token: 0x04001BE5 RID: 7141
			DefaultOffhand,
			// Token: 0x04001BE6 RID: 7142
			DefaultRelic,
			// Token: 0x04001BE7 RID: 7143
			DefaultFineGem,
			// Token: 0x04001BE8 RID: 7144
			DefaultFineBossGem,
			// Token: 0x04001BE9 RID: 7145
			LeatherChest,
			// Token: 0x04001BEA RID: 7146
			LeatherBelt,
			// Token: 0x04001BEB RID: 7147
			LeatherBoots,
			// Token: 0x04001BEC RID: 7148
			LeatherBracer,
			// Token: 0x04001BED RID: 7149
			LeatherCloak,
			// Token: 0x04001BEE RID: 7150
			LeatherGloves,
			// Token: 0x04001BEF RID: 7151
			LeatherHood,
			// Token: 0x04001BF0 RID: 7152
			LeatherPauldrons,
			// Token: 0x04001BF1 RID: 7153
			LeatherPants,
			// Token: 0x04001BF2 RID: 7154
			BasicAxe,
			// Token: 0x04001BF3 RID: 7155
			BasicBow,
			// Token: 0x04001BF4 RID: 7156
			BasicFist,
			// Token: 0x04001BF5 RID: 7157
			BasicMace,
			// Token: 0x04001BF6 RID: 7158
			BasicCrossbow,
			// Token: 0x04001BF7 RID: 7159
			BasicDagger,
			// Token: 0x04001BF8 RID: 7160
			BasicGun,
			// Token: 0x04001BF9 RID: 7161
			BasicHammer,
			// Token: 0x04001BFA RID: 7162
			BasicSpear,
			// Token: 0x04001BFB RID: 7163
			BasicStaff,
			// Token: 0x04001BFC RID: 7164
			BasicSword,
			// Token: 0x04001BFD RID: 7165
			BasicSpellBlade,
			// Token: 0x04001BFE RID: 7166
			BasicSpellTome,
			// Token: 0x04001BFF RID: 7167
			BasicShield,
			// Token: 0x04001C00 RID: 7168
			BasicQuiver,
			// Token: 0x04001C01 RID: 7169
			BasicWard,
			// Token: 0x04001C02 RID: 7170
			CopperAmulet,
			// Token: 0x04001C03 RID: 7171
			CopperRing,
			// Token: 0x04001C04 RID: 7172
			CopperTrinket,
			// Token: 0x04001C05 RID: 7173
			ClothRobes,
			// Token: 0x04001C06 RID: 7174
			ClothBelt,
			// Token: 0x04001C07 RID: 7175
			ClothBoots,
			// Token: 0x04001C08 RID: 7176
			ClothBracer,
			// Token: 0x04001C09 RID: 7177
			ClothCloak,
			// Token: 0x04001C0A RID: 7178
			ClothGloves,
			// Token: 0x04001C0B RID: 7179
			ClothHood,
			// Token: 0x04001C0C RID: 7180
			ClothLeggings,
			// Token: 0x04001C0D RID: 7181
			ClothMantle,
			// Token: 0x04001C0E RID: 7182
			RoughTunic,
			// Token: 0x04001C0F RID: 7183
			RoughBelt,
			// Token: 0x04001C10 RID: 7184
			RoughBoots,
			// Token: 0x04001C11 RID: 7185
			RoughBracer,
			// Token: 0x04001C12 RID: 7186
			RoughGloves,
			// Token: 0x04001C13 RID: 7187
			RoughHood,
			// Token: 0x04001C14 RID: 7188
			RoughPants,
			// Token: 0x04001C15 RID: 7189
			RoughPauldrons,
			// Token: 0x04001C16 RID: 7190
			IronArmour,
			// Token: 0x04001C17 RID: 7191
			IronBelt,
			// Token: 0x04001C18 RID: 7192
			IronBoots,
			// Token: 0x04001C19 RID: 7193
			IronBracer,
			// Token: 0x04001C1A RID: 7194
			IronGloves,
			// Token: 0x04001C1B RID: 7195
			IronHelmet,
			// Token: 0x04001C1C RID: 7196
			IronGreaves,
			// Token: 0x04001C1D RID: 7197
			IronPauldrons,
			// Token: 0x04001C1E RID: 7198
			IronBow,
			// Token: 0x04001C1F RID: 7199
			IronDagger,
			// Token: 0x04001C20 RID: 7200
			IronMusket,
			// Token: 0x04001C21 RID: 7201
			IronSpear,
			// Token: 0x04001C22 RID: 7202
			IronSword,
			// Token: 0x04001C23 RID: 7203
			IronPistol,
			// Token: 0x04001C24 RID: 7204
			RoughHideTome,
			// Token: 0x04001C25 RID: 7205
			PlainStaff,
			// Token: 0x04001C26 RID: 7206
			IronShield,
			// Token: 0x04001C27 RID: 7207
			PlainArrows,
			// Token: 0x04001C28 RID: 7208
			IronBell,
			// Token: 0x04001C29 RID: 7209
			IronBand,
			// Token: 0x04001C2A RID: 7210
			IronChain,
			// Token: 0x04001C2B RID: 7211
			IronTrinket,
			// Token: 0x04001C2C RID: 7212
			WovenTunic,
			// Token: 0x04001C2D RID: 7213
			WovenBelt,
			// Token: 0x04001C2E RID: 7214
			WovenBoots,
			// Token: 0x04001C2F RID: 7215
			WovenBracer,
			// Token: 0x04001C30 RID: 7216
			WovenCloak,
			// Token: 0x04001C31 RID: 7217
			WovenGloves,
			// Token: 0x04001C32 RID: 7218
			WovenHood,
			// Token: 0x04001C33 RID: 7219
			WovenLeggings,
			// Token: 0x04001C34 RID: 7220
			WovenMantle,
			// Token: 0x04001C35 RID: 7221
			HeavyTunic,
			// Token: 0x04001C36 RID: 7222
			HeavyBelt,
			// Token: 0x04001C37 RID: 7223
			HeavyBoots,
			// Token: 0x04001C38 RID: 7224
			HeavyBracer,
			// Token: 0x04001C39 RID: 7225
			HeavyGloves,
			// Token: 0x04001C3A RID: 7226
			HeavyHelmet,
			// Token: 0x04001C3B RID: 7227
			HeavyPants,
			// Token: 0x04001C3C RID: 7228
			HeavyPads,
			// Token: 0x04001C3D RID: 7229
			LeadArmour,
			// Token: 0x04001C3E RID: 7230
			LeadBelt,
			// Token: 0x04001C3F RID: 7231
			LeadBoots,
			// Token: 0x04001C40 RID: 7232
			LeadBracer,
			// Token: 0x04001C41 RID: 7233
			LeadGloves,
			// Token: 0x04001C42 RID: 7234
			LeadHelmet,
			// Token: 0x04001C43 RID: 7235
			LeadGreaves,
			// Token: 0x04001C44 RID: 7236
			LeadPauldrons,
			// Token: 0x04001C45 RID: 7237
			LeadAxe,
			// Token: 0x04001C46 RID: 7238
			FineCrossbow,
			// Token: 0x04001C47 RID: 7239
			LeadDagger,
			// Token: 0x04001C48 RID: 7240
			LeadKnuckles,
			// Token: 0x04001C49 RID: 7241
			LeadGun,
			// Token: 0x04001C4A RID: 7242
			LeadHammer,
			// Token: 0x04001C4B RID: 7243
			LeadMace,
			// Token: 0x04001C4C RID: 7244
			LeadSpear,
			// Token: 0x04001C4D RID: 7245
			FineStaff,
			// Token: 0x04001C4E RID: 7246
			LeadSword,
			// Token: 0x04001C4F RID: 7247
			LeadSpellblade,
			// Token: 0x04001C50 RID: 7248
			HeavyTome,
			// Token: 0x04001C51 RID: 7249
			LeadPistol,
			// Token: 0x04001C52 RID: 7250
			LeadShield,
			// Token: 0x04001C53 RID: 7251
			HeavyQuiver,
			// Token: 0x04001C54 RID: 7252
			LeadWard,
			// Token: 0x04001C55 RID: 7253
			LeadAmulet,
			// Token: 0x04001C56 RID: 7254
			LeadRing,
			// Token: 0x04001C57 RID: 7255
			LeadTrinket,
			// Token: 0x04001C58 RID: 7256
			SilkRobes,
			// Token: 0x04001C59 RID: 7257
			SilkBelt,
			// Token: 0x04001C5A RID: 7258
			SilkBoots,
			// Token: 0x04001C5B RID: 7259
			SilkBracer,
			// Token: 0x04001C5C RID: 7260
			SilkCloak,
			// Token: 0x04001C5D RID: 7261
			SilkGloves,
			// Token: 0x04001C5E RID: 7262
			SilkHood,
			// Token: 0x04001C5F RID: 7263
			SilkLeggings,
			// Token: 0x04001C60 RID: 7264
			SilkMantle,
			// Token: 0x04001C61 RID: 7265
			RuggedTunic,
			// Token: 0x04001C62 RID: 7266
			RuggedBelt,
			// Token: 0x04001C63 RID: 7267
			RuggedBoots,
			// Token: 0x04001C64 RID: 7268
			RuggedBracer,
			// Token: 0x04001C65 RID: 7269
			RuggedGloves,
			// Token: 0x04001C66 RID: 7270
			RuggedHelmet,
			// Token: 0x04001C67 RID: 7271
			RuggedPants,
			// Token: 0x04001C68 RID: 7272
			RuggedPauldrons,
			// Token: 0x04001C69 RID: 7273
			GoldArmour,
			// Token: 0x04001C6A RID: 7274
			GoldBelt,
			// Token: 0x04001C6B RID: 7275
			GoldBoots,
			// Token: 0x04001C6C RID: 7276
			GoldBracer,
			// Token: 0x04001C6D RID: 7277
			GoldGloves,
			// Token: 0x04001C6E RID: 7278
			GoldHelmet,
			// Token: 0x04001C6F RID: 7279
			GoldGreaves,
			// Token: 0x04001C70 RID: 7280
			GoldPauldrons,
			// Token: 0x04001C71 RID: 7281
			GoldAxe,
			// Token: 0x04001C72 RID: 7282
			GoldBow,
			// Token: 0x04001C73 RID: 7283
			GoldKnuckles,
			// Token: 0x04001C74 RID: 7284
			GoldHammer,
			// Token: 0x04001C75 RID: 7285
			GoldMace,
			// Token: 0x04001C76 RID: 7286
			GoldSpear,
			// Token: 0x04001C77 RID: 7287
			DenseStaff,
			// Token: 0x04001C78 RID: 7288
			GoldSword,
			// Token: 0x04001C79 RID: 7289
			GoldSpellblade,
			// Token: 0x04001C7A RID: 7290
			RuggedTome,
			// Token: 0x04001C7B RID: 7291
			GoldPistol,
			// Token: 0x04001C7C RID: 7292
			GoldShield,
			// Token: 0x04001C7D RID: 7293
			RuggedQuiver,
			// Token: 0x04001C7E RID: 7294
			GoldWard,
			// Token: 0x04001C7F RID: 7295
			GoldAmulet,
			// Token: 0x04001C80 RID: 7296
			GoldRing,
			// Token: 0x04001C81 RID: 7297
			GoldTrinket,
			// Token: 0x04001C82 RID: 7298
			VelvetRobes,
			// Token: 0x04001C83 RID: 7299
			VelvetBelt,
			// Token: 0x04001C84 RID: 7300
			VelvetBoots,
			// Token: 0x04001C85 RID: 7301
			VelvetBracer,
			// Token: 0x04001C86 RID: 7302
			VelvetCloak,
			// Token: 0x04001C87 RID: 7303
			VelvetGloves,
			// Token: 0x04001C88 RID: 7304
			VelvetHood,
			// Token: 0x04001C89 RID: 7305
			VelvetLeggings,
			// Token: 0x04001C8A RID: 7306
			VelvetMantle,
			// Token: 0x04001C8B RID: 7307
			CuredTunic,
			// Token: 0x04001C8C RID: 7308
			CuredBelt,
			// Token: 0x04001C8D RID: 7309
			CuredBoots,
			// Token: 0x04001C8E RID: 7310
			CuredBracer,
			// Token: 0x04001C8F RID: 7311
			CuredCloak,
			// Token: 0x04001C90 RID: 7312
			CuredGloves,
			// Token: 0x04001C91 RID: 7313
			CuredHelmet,
			// Token: 0x04001C92 RID: 7314
			CuredPants,
			// Token: 0x04001C93 RID: 7315
			CuredPauldrons,
			// Token: 0x04001C94 RID: 7316
			MythrilArmour,
			// Token: 0x04001C95 RID: 7317
			MythrilBelt,
			// Token: 0x04001C96 RID: 7318
			MythrilBoots,
			// Token: 0x04001C97 RID: 7319
			MythrilBracer,
			// Token: 0x04001C98 RID: 7320
			MythrilCloak,
			// Token: 0x04001C99 RID: 7321
			MythrilGloves,
			// Token: 0x04001C9A RID: 7322
			MythrilHelmet,
			// Token: 0x04001C9B RID: 7323
			MythrilGreaves,
			// Token: 0x04001C9C RID: 7324
			MythrilPauldrons,
			// Token: 0x04001C9D RID: 7325
			MythrilAxe,
			// Token: 0x04001C9E RID: 7326
			FirBow,
			// Token: 0x04001C9F RID: 7327
			MythrilDagger,
			// Token: 0x04001CA0 RID: 7328
			MythrilMace,
			// Token: 0x04001CA1 RID: 7329
			MythrilSpear,
			// Token: 0x04001CA2 RID: 7330
			FirStaff,
			// Token: 0x04001CA3 RID: 7331
			MythrilSword,
			// Token: 0x04001CA4 RID: 7332
			MythrilSpellblade,
			// Token: 0x04001CA5 RID: 7333
			MythrilShield,
			// Token: 0x04001CA6 RID: 7334
			MythrilQuiver,
			// Token: 0x04001CA7 RID: 7335
			MythrilWard,
			// Token: 0x04001CA8 RID: 7336
			MythrilAmulet,
			// Token: 0x04001CA9 RID: 7337
			MythrilBand,
			// Token: 0x04001CAA RID: 7338
			MythrilTrinket,
			// Token: 0x04001CAB RID: 7339
			SatinRobes,
			// Token: 0x04001CAC RID: 7340
			SatinBelt,
			// Token: 0x04001CAD RID: 7341
			SatinBoots,
			// Token: 0x04001CAE RID: 7342
			SatinBracer,
			// Token: 0x04001CAF RID: 7343
			SatinCloak,
			// Token: 0x04001CB0 RID: 7344
			SatinGloves,
			// Token: 0x04001CB1 RID: 7345
			SatinHood,
			// Token: 0x04001CB2 RID: 7346
			SatinLeggings,
			// Token: 0x04001CB3 RID: 7347
			SatinMantle,
			// Token: 0x04001CB4 RID: 7348
			DragonscaleTunic,
			// Token: 0x04001CB5 RID: 7349
			DragonscaleBelt,
			// Token: 0x04001CB6 RID: 7350
			DragonscaleBoots,
			// Token: 0x04001CB7 RID: 7351
			DragonscaleBracer,
			// Token: 0x04001CB8 RID: 7352
			DragonscaleCloak,
			// Token: 0x04001CB9 RID: 7353
			DragonscaleGloves,
			// Token: 0x04001CBA RID: 7354
			DragonscaleHelmet,
			// Token: 0x04001CBB RID: 7355
			DragonscalePants,
			// Token: 0x04001CBC RID: 7356
			DragonscalePauldrons,
			// Token: 0x04001CBD RID: 7357
			IridiumArmour,
			// Token: 0x04001CBE RID: 7358
			IridiumBelt,
			// Token: 0x04001CBF RID: 7359
			IridiumBoots,
			// Token: 0x04001CC0 RID: 7360
			IridiumBracer,
			// Token: 0x04001CC1 RID: 7361
			IridiumCloak,
			// Token: 0x04001CC2 RID: 7362
			IridiumGloves,
			// Token: 0x04001CC3 RID: 7363
			IridiumHelmet,
			// Token: 0x04001CC4 RID: 7364
			IridiumGreaves,
			// Token: 0x04001CC5 RID: 7365
			IridiumPauldrons,
			// Token: 0x04001CC6 RID: 7366
			IridiumAxe,
			// Token: 0x04001CC7 RID: 7367
			MahoganyBow,
			// Token: 0x04001CC8 RID: 7368
			MahoganyCrossbow,
			// Token: 0x04001CC9 RID: 7369
			IridiumDagger,
			// Token: 0x04001CCA RID: 7370
			IridiumClaws,
			// Token: 0x04001CCB RID: 7371
			IridiumGun,
			// Token: 0x04001CCC RID: 7372
			IridiumHammer,
			// Token: 0x04001CCD RID: 7373
			IridiumMace,
			// Token: 0x04001CCE RID: 7374
			IridiumSpear,
			// Token: 0x04001CCF RID: 7375
			MahoganyStaff,
			// Token: 0x04001CD0 RID: 7376
			IridiumSword,
			// Token: 0x04001CD1 RID: 7377
			IridiumSpellblade,
			// Token: 0x04001CD2 RID: 7378
			DragonscaleTome,
			// Token: 0x04001CD3 RID: 7379
			IridiumPistol,
			// Token: 0x04001CD4 RID: 7380
			IridiumShield,
			// Token: 0x04001CD5 RID: 7381
			DragonscaleQuiver,
			// Token: 0x04001CD6 RID: 7382
			IridiumWard,
			// Token: 0x04001CD7 RID: 7383
			IridiumAmulet,
			// Token: 0x04001CD8 RID: 7384
			IridiumBand,
			// Token: 0x04001CD9 RID: 7385
			IridiumTrinket,
			// Token: 0x04001CDA RID: 7386
			WarriorRelic,
			// Token: 0x04001CDB RID: 7387
			RangerRelic,
			// Token: 0x04001CDC RID: 7388
			MageRelic,
			// Token: 0x04001CDD RID: 7389
			BarbarianRelic,
			// Token: 0x04001CDE RID: 7390
			JuggernautRelic,
			// Token: 0x04001CDF RID: 7391
			WardenRelic,
			// Token: 0x04001CE0 RID: 7392
			AssasinRelic,
			// Token: 0x04001CE1 RID: 7393
			MarksmanRelic,
			// Token: 0x04001CE2 RID: 7394
			RenegadeRelic,
			// Token: 0x04001CE3 RID: 7395
			ArchmageRelic,
			// Token: 0x04001CE4 RID: 7396
			VizierRelic,
			// Token: 0x04001CE5 RID: 7397
			BattlemageRelic,
			// Token: 0x04001CE6 RID: 7398
			CutRuby,
			// Token: 0x04001CE7 RID: 7399
			CutOpal,
			// Token: 0x04001CE8 RID: 7400
			CutPeridot,
			// Token: 0x04001CE9 RID: 7401
			CutAmber,
			// Token: 0x04001CEA RID: 7402
			CutMalachite,
			// Token: 0x04001CEB RID: 7403
			CutSapphire,
			// Token: 0x04001CEC RID: 7404
			CutAmethyst,
			// Token: 0x04001CED RID: 7405
			Firestone,
			// Token: 0x04001CEE RID: 7406
			Coldstone,
			// Token: 0x04001CEF RID: 7407
			Lightningstone,
			// Token: 0x04001CF0 RID: 7408
			Arcanestone,
			// Token: 0x04001CF1 RID: 7409
			SteelPrism,
			// Token: 0x04001CF2 RID: 7410
			Meteorite,
			// Token: 0x04001CF3 RID: 7411
			ImperialStar,
			// Token: 0x04001CF4 RID: 7412
			Heartstone,
			// Token: 0x04001CF5 RID: 7413
			ShiftingPearl,
			// Token: 0x04001CF6 RID: 7414
			TravellersGloves,
			// Token: 0x04001CF7 RID: 7415
			TravellersLeggings,
			// Token: 0x04001CF8 RID: 7416
			PunishersBand,
			// Token: 0x04001CF9 RID: 7417
			SwiftStriders,
			// Token: 0x04001CFA RID: 7418
			RavagersCords,
			// Token: 0x04001CFB RID: 7419
			EmperorsBlessing,
			// Token: 0x04001CFC RID: 7420
			EmperorsFortitude,
			// Token: 0x04001CFD RID: 7421
			EmperorsStrength,
			// Token: 0x04001CFE RID: 7422
			EmperorsDoubt,
			// Token: 0x04001CFF RID: 7423
			Bulwark,
			// Token: 0x04001D00 RID: 7424
			HonedBow,
			// Token: 0x04001D01 RID: 7425
			FirestoneShiv,
			// Token: 0x04001D02 RID: 7426
			FlameproofEpaulettes,
			// Token: 0x04001D03 RID: 7427
			WoolenWraps,
			// Token: 0x04001D04 RID: 7428
			BlizzardStaff,
			// Token: 0x04001D05 RID: 7429
			ThunderCrash,
			// Token: 0x04001D06 RID: 7430
			GroundingBoots,
			// Token: 0x04001D07 RID: 7431
			ArcaneRitualStaff,
			// Token: 0x04001D08 RID: 7432
			ArcaneWard,
			// Token: 0x04001D09 RID: 7433
			WolfPeltCloak,
			// Token: 0x04001D0A RID: 7434
			BrutesWarhammer,
			// Token: 0x04001D0B RID: 7435
			BoneBow,
			// Token: 0x04001D0C RID: 7436
			BearClaw,
			// Token: 0x04001D0D RID: 7437
			QueensEye,
			// Token: 0x04001D0E RID: 7438
			MagesShawl,
			// Token: 0x04001D0F RID: 7439
			OrcishCharm,
			// Token: 0x04001D10 RID: 7440
			BerserkerHelm,
			// Token: 0x04001D11 RID: 7441
			Bonecleaver,
			// Token: 0x04001D12 RID: 7442
			BoglinToothNecklace,
			// Token: 0x04001D13 RID: 7443
			FrostRing,
			// Token: 0x04001D14 RID: 7444
			FlameRing,
			// Token: 0x04001D15 RID: 7445
			StoneCarapace,
			// Token: 0x04001D16 RID: 7446
			WurmCarapace,
			// Token: 0x04001D17 RID: 7447
			DesertTarsus,
			// Token: 0x04001D18 RID: 7448
			RoyalCuffs,
			// Token: 0x04001D19 RID: 7449
			YetiHideHood,
			// Token: 0x04001D1A RID: 7450
			FrostSting,
			// Token: 0x04001D1B RID: 7451
			BeetleBlade,
			// Token: 0x04001D1C RID: 7452
			RitualKnife,
			// Token: 0x04001D1D RID: 7453
			LivingSash,
			// Token: 0x04001D1E RID: 7454
			JungleCape,
			// Token: 0x04001D1F RID: 7455
			Cleaver,
			// Token: 0x04001D20 RID: 7456
			MutantShell,
			// Token: 0x04001D21 RID: 7457
			LivingRootStaff,
			// Token: 0x04001D22 RID: 7458
			HandlersGloves,
			// Token: 0x04001D23 RID: 7459
			IvoryBlade,
			// Token: 0x04001D24 RID: 7460
			HornedMace,
			// Token: 0x04001D25 RID: 7461
			OxHidePants,
			// Token: 0x04001D26 RID: 7462
			HybridBand,
			// Token: 0x04001D27 RID: 7463
			CockatriceTalon,
			// Token: 0x04001D28 RID: 7464
			WailingTome,
			// Token: 0x04001D29 RID: 7465
			Wightsbane,
			// Token: 0x04001D2A RID: 7466
			DecayingWrappings,
			// Token: 0x04001D2B RID: 7467
			LordsCape,
			// Token: 0x04001D2C RID: 7468
			WitchHuntersCrossbow,
			// Token: 0x04001D2D RID: 7469
			BoneBlade,
			// Token: 0x04001D2E RID: 7470
			GreatHelm,
			// Token: 0x04001D2F RID: 7471
			RoyalSignetRing,
			// Token: 0x04001D30 RID: 7472
			ClockworkRifle,
			// Token: 0x04001D31 RID: 7473
			BouncersBreastplate,
			// Token: 0x04001D32 RID: 7474
			ToxicWaders,
			// Token: 0x04001D33 RID: 7475
			MechanicalFixture,
			// Token: 0x04001D34 RID: 7476
			MechanizedBow,
			// Token: 0x04001D35 RID: 7477
			BloodCrystal,
			// Token: 0x04001D36 RID: 7478
			DemonicClaws,
			// Token: 0x04001D37 RID: 7479
			DemonicTome,
			// Token: 0x04001D38 RID: 7480
			DemonHideGreaves,
			// Token: 0x04001D39 RID: 7481
			HellscaleQuiver,
			// Token: 0x04001D3A RID: 7482
			DemonicSinstone,
			// Token: 0x04001D3B RID: 7483
			Bludger,
			// Token: 0x04001D3C RID: 7484
			LightFingers,
			// Token: 0x04001D3D RID: 7485
			CallOfTheVoid,
			// Token: 0x04001D3E RID: 7486
			Envenom,
			// Token: 0x04001D3F RID: 7487
			PlagueStaff,
			// Token: 0x04001D40 RID: 7488
			PlagueCharm,
			// Token: 0x04001D41 RID: 7489
			ImbuedTassets,
			// Token: 0x04001D42 RID: 7490
			ImbuedBoots,
			// Token: 0x04001D43 RID: 7491
			ImbuedPauldrons,
			// Token: 0x04001D44 RID: 7492
			RunicCrossbow,
			// Token: 0x04001D45 RID: 7493
			RunicSpellblade,
			// Token: 0x04001D46 RID: 7494
			RunicAxe,
			// Token: 0x04001D47 RID: 7495
			IceBand,
			// Token: 0x04001D48 RID: 7496
			FireBand,
			// Token: 0x04001D49 RID: 7497
			ThunderBand,
			// Token: 0x04001D4A RID: 7498
			ElementStone,
			// Token: 0x04001D4B RID: 7499
			TheContract,
			// Token: 0x04001D4C RID: 7500
			SpareEyestalk,
			// Token: 0x04001D4D RID: 7501
			TatteredWings,
			// Token: 0x04001D4E RID: 7502
			BookOfHorrors,
			// Token: 0x04001D4F RID: 7503
			SinewBow,
			// Token: 0x04001D50 RID: 7504
			WhisperingDread,
			// Token: 0x04001D51 RID: 7505
			DragonBand,
			// Token: 0x04001D52 RID: 7506
			DragonslayersBolter,
			// Token: 0x04001D53 RID: 7507
			RoyalPendant,
			// Token: 0x04001D54 RID: 7508
			DragoncrestShield,
			// Token: 0x04001D55 RID: 7509
			DragonforgedSpellblade,
			// Token: 0x04001D56 RID: 7510
			DragoncrestCord,
			// Token: 0x04001D57 RID: 7511
			DragonforgedClaws,
			// Token: 0x04001D58 RID: 7512
			Sundown,
			// Token: 0x04001D59 RID: 7513
			Obsidian,
			// Token: 0x04001D5A RID: 7514
			GuideToTheAbyss,
			// Token: 0x04001D5B RID: 7515
			QuiverOfTheDeep,
			// Token: 0x04001D5C RID: 7516
			Vanquisher,
			// Token: 0x04001D5D RID: 7517
			CleaverOfTheDamned,
			// Token: 0x04001D5E RID: 7518
			TheDestroyer,
			// Token: 0x04001D5F RID: 7519
			Greed,
			// Token: 0x04001D60 RID: 7520
			JewelOfTheEmpire,
			// Token: 0x04001D61 RID: 7521
			HeartOfTheAbyss,
			// Token: 0x04001D62 RID: 7522
			PathfindersTunic,
			// Token: 0x04001D63 RID: 7523
			PathfindersBelt,
			// Token: 0x04001D64 RID: 7524
			PathfindersBoots,
			// Token: 0x04001D65 RID: 7525
			PathfindersBracers,
			// Token: 0x04001D66 RID: 7526
			PathfindersCloak,
			// Token: 0x04001D67 RID: 7527
			PathfindersGloves,
			// Token: 0x04001D68 RID: 7528
			PathfindersHelmet,
			// Token: 0x04001D69 RID: 7529
			PathfindersPants,
			// Token: 0x04001D6A RID: 7530
			PathfindersPads,
			// Token: 0x04001D6B RID: 7531
			PathfindersAmulet,
			// Token: 0x04001D6C RID: 7532
			PathfindersBand,
			// Token: 0x04001D6D RID: 7533
			PathfindersTrinket,
			// Token: 0x04001D6E RID: 7534
			PathfindersBow,
			// Token: 0x04001D6F RID: 7535
			PathfindersMace,
			// Token: 0x04001D70 RID: 7536
			PathfindersSpellblade,
			// Token: 0x04001D71 RID: 7537
			FerrousCore,
			// Token: 0x04001D72 RID: 7538
			PolishedFang,
			// Token: 0x04001D73 RID: 7539
			AssassinsCape,
			// Token: 0x04001D74 RID: 7540
			HiddenShroud,
			// Token: 0x04001D75 RID: 7541
			NaturesShawl,
			// Token: 0x04001D76 RID: 7542
			PlatedCloak,
			// Token: 0x04001D77 RID: 7543
			SeafarersCape,
			// Token: 0x04001D78 RID: 7544
			TimewornCape,
			// Token: 0x04001D79 RID: 7545
			PlatedArmour,
			// Token: 0x04001D7A RID: 7546
			PlatedGirdle,
			// Token: 0x04001D7B RID: 7547
			PlatedBoots,
			// Token: 0x04001D7C RID: 7548
			PlatedBracers,
			// Token: 0x04001D7D RID: 7549
			ElegantCuffs,
			// Token: 0x04001D7E RID: 7550
			ArcaneVambraces,
			// Token: 0x04001D7F RID: 7551
			PlatedGloves,
			// Token: 0x04001D80 RID: 7552
			WeatheredGloves,
			// Token: 0x04001D81 RID: 7553
			NaturesGauntlets,
			// Token: 0x04001D82 RID: 7554
			PlatedHelm,
			// Token: 0x04001D83 RID: 7555
			EvokersHood,
			// Token: 0x04001D84 RID: 7556
			PlatedPauldrons,
			// Token: 0x04001D85 RID: 7557
			PlatedGreaves,
			// Token: 0x04001D86 RID: 7558
			WeatheredGreaves,
			// Token: 0x04001D87 RID: 7559
			BarrierBlade,
			// Token: 0x04001D88 RID: 7560
			FlameCharm,
			// Token: 0x04001D89 RID: 7561
			FrozenCharm,
			// Token: 0x04001D8A RID: 7562
			LightningCharm,
			// Token: 0x04001D8B RID: 7563
			IndomitableCharm,
			// Token: 0x04001D8C RID: 7564
			NaturesVitality,
			// Token: 0x04001D8D RID: 7565
			RingOfShadows,
			// Token: 0x04001D8E RID: 7566
			BandOfPureEnergy,
			// Token: 0x04001D8F RID: 7567
			StoneBand,
			// Token: 0x04001D90 RID: 7568
			NaturesBlessing,
			// Token: 0x04001D91 RID: 7569
			BandOfPotency,
			// Token: 0x04001D92 RID: 7570
			IndomitableRing,
			// Token: 0x04001D93 RID: 7571
			CharmOfAggression,
			// Token: 0x04001D94 RID: 7572
			CharmOfTheElements,
			// Token: 0x04001D95 RID: 7573
			Whetstone,
			// Token: 0x04001D96 RID: 7574
			ToxicVial,
			// Token: 0x04001D97 RID: 7575
			BlazingCatalyst,
			// Token: 0x04001D98 RID: 7576
			TemporalStone,
			// Token: 0x04001D99 RID: 7577
			EnergyShield,
			// Token: 0x04001D9A RID: 7578
			TemporalShield,
			// Token: 0x04001D9B RID: 7579
			ShieldOfRenewal,
			// Token: 0x04001D9C RID: 7580
			ArcaneCore,
			// Token: 0x04001D9D RID: 7581
			CurseBreaker,
			// Token: 0x04001D9E RID: 7582
			CobaltShortbow,
			// Token: 0x04001D9F RID: 7583
			CobaltRepeater,
			// Token: 0x04001DA0 RID: 7584
			CobaltShiv,
			// Token: 0x04001DA1 RID: 7585
			CobaltTrident,
			// Token: 0x04001DA2 RID: 7586
			CobaltStaff,
			// Token: 0x04001DA3 RID: 7587
			CobaltTome,
			// Token: 0x04001DA4 RID: 7588
			OccultRobes,
			// Token: 0x04001DA5 RID: 7589
			OccultBelt,
			// Token: 0x04001DA6 RID: 7590
			OccultBoots,
			// Token: 0x04001DA7 RID: 7591
			OccultBracers,
			// Token: 0x04001DA8 RID: 7592
			OccultGloves,
			// Token: 0x04001DA9 RID: 7593
			OccultHood,
			// Token: 0x04001DAA RID: 7594
			OccultMantle,
			// Token: 0x04001DAB RID: 7595
			OccultLeggings,
			// Token: 0x04001DAC RID: 7596
			ElegantQuiver,
			// Token: 0x04001DAD RID: 7597
			EldritchArtifact,
			// Token: 0x04001DAE RID: 7598
			GoliathsCrusher,
			// Token: 0x04001DAF RID: 7599
			BarbedShield,
			// Token: 0x04001DB0 RID: 7600
			LightningTalisman,
			// Token: 0x04001DB1 RID: 7601
			PillarOfFlame,
			// Token: 0x04001DB2 RID: 7602
			SlayersGauntlets,
			// Token: 0x04001DB3 RID: 7603
			Rockwall,
			// Token: 0x04001DB4 RID: 7604
			BeltOfDecay,
			// Token: 0x04001DB5 RID: 7605
			PraetoriansGuard,
			// Token: 0x04001DB6 RID: 7606
			StalkersHood,
			// Token: 0x04001DB7 RID: 7607
			ConductingPlate,
			// Token: 0x04001DB8 RID: 7608
			BlisteringBand,
			// Token: 0x04001DB9 RID: 7609
			NullifyingBand,
			// Token: 0x04001DBA RID: 7610
			ExtinguishingBand,
			// Token: 0x04001DBB RID: 7611
			LucidSash,
			// Token: 0x04001DBC RID: 7612
			HelmOfCommand,
			// Token: 0x04001DBD RID: 7613
			FinalArgument,
			// Token: 0x04001DBE RID: 7614
			BrutesPummeler,
			// Token: 0x04001DBF RID: 7615
			FrozenTalisman,
			// Token: 0x04001DC0 RID: 7616
			FrigidPauldrons,
			// Token: 0x04001DC1 RID: 7617
			Malediction,
			// Token: 0x04001DC2 RID: 7618
			Malady,
			// Token: 0x04001DC3 RID: 7619
			GrimReapers,
			// Token: 0x04001DC4 RID: 7620
			ReaversShield,
			// Token: 0x04001DC5 RID: 7621
			RingOfManipulation,
			// Token: 0x04001DC6 RID: 7622
			SpiderSilkWraps,
			// Token: 0x04001DC7 RID: 7623
			VampiricBrace,
			// Token: 0x04001DC8 RID: 7624
			ColdsteelPlates,
			// Token: 0x04001DC9 RID: 7625
			ShadowscaleGuards,
			// Token: 0x04001DCA RID: 7626
			HillstridersStep,
			// Token: 0x04001DCB RID: 7627
			ObsidianStompers,
			// Token: 0x04001DCC RID: 7628
			FlurryCloak,
			// Token: 0x04001DCD RID: 7629
			CloakOfPurity,
			// Token: 0x04001DCE RID: 7630
			ClockworkHeart,
			// Token: 0x04001DCF RID: 7631
			ScorchedBow,
			// Token: 0x04001DD0 RID: 7632
			HillstridersAmbition,
			// Token: 0x04001DD1 RID: 7633
			NaturesTrust,
			// Token: 0x04001DD2 RID: 7634
			FrozenCodex,
			// Token: 0x04001DD3 RID: 7635
			WildfirePauldrons,
			// Token: 0x04001DD4 RID: 7636
			LordsEmbrace,
			// Token: 0x04001DD5 RID: 7637
			Glimpse,
			// Token: 0x04001DD6 RID: 7638
			DwarvenHandcannon,
			// Token: 0x04001DD7 RID: 7639
			StormBand,
			// Token: 0x04001DD8 RID: 7640
			RegalHelmet,
			// Token: 0x04001DD9 RID: 7641
			RegalSabatons,
			// Token: 0x04001DDA RID: 7642
			RegalDrape,
			// Token: 0x04001DDB RID: 7643
			HuntsmansPants,
			// Token: 0x04001DDC RID: 7644
			HuntsmansGloves,
			// Token: 0x04001DDD RID: 7645
			HuntsmansBelt,
			// Token: 0x04001DDE RID: 7646
			ClericsRobes,
			// Token: 0x04001DDF RID: 7647
			ClericsBracers,
			// Token: 0x04001DE0 RID: 7648
			ClericsMantle,
			// Token: 0x04001DE1 RID: 7649
			ElementalFacet,
			// Token: 0x04001DE2 RID: 7650
			RazorShield,
			// Token: 0x04001DE3 RID: 7651
			PendantOfVigor,
			// Token: 0x04001DE4 RID: 7652
			LuckyPendant,
			// Token: 0x04001DE5 RID: 7653
			AncientClaw,
			// Token: 0x04001DE6 RID: 7654
			Swiftblade,
			// Token: 0x04001DE7 RID: 7655
			Ruination,
			// Token: 0x04001DE8 RID: 7656
			Refuge,
			// Token: 0x04001DE9 RID: 7657
			SteelGlaive,
			// Token: 0x04001DEA RID: 7658
			BrutesPulverizer,
			// Token: 0x04001DEB RID: 7659
			ChilledBolter,
			// Token: 0x04001DEC RID: 7660
			FulminatingBlade,
			// Token: 0x04001DED RID: 7661
			MenacingBand,
			// Token: 0x04001DEE RID: 7662
			ElementalBand,
			// Token: 0x04001DEF RID: 7663
			DwarvenAxe,
			// Token: 0x04001DF0 RID: 7664
			HillstridersCane,
			// Token: 0x04001DF1 RID: 7665
			ObsidianTome,
			// Token: 0x04001DF2 RID: 7666
			FlamingGreatsaw,
			// Token: 0x04001DF3 RID: 7667
			BandOfUndeath,
			// Token: 0x04001DF4 RID: 7668
			WarlordsSignet,
			// Token: 0x04001DF5 RID: 7669
			MagicFinders,
			// Token: 0x04001DF6 RID: 7670
			AlchemistsSash,
			// Token: 0x04001DF7 RID: 7671
			ViziersClutch,
			// Token: 0x04001DF8 RID: 7672
			DemonicSpaulder,
			// Token: 0x04001DF9 RID: 7673
			ChromaticBow,
			// Token: 0x04001DFA RID: 7674
			AbyssalCuffs,
			// Token: 0x04001DFB RID: 7675
			Gravedancer,
			// Token: 0x04001DFC RID: 7676
			Serpentstone,
			// Token: 0x04001DFD RID: 7677
			MasteryFocus,
			// Token: 0x04001DFE RID: 7678
			ChargedWristguards,
			// Token: 0x04001DFF RID: 7679
			GlacialGirdle,
			// Token: 0x04001E00 RID: 7680
			MysticEdge,
			// Token: 0x04001E01 RID: 7681
			FrozenReaver,
			// Token: 0x04001E02 RID: 7682
			AbyssalArray,
			// Token: 0x04001E03 RID: 7683
			DemonicBarricade,
			// Token: 0x04001E04 RID: 7684
			StrategicGrips,
			// Token: 0x04001E05 RID: 7685
			SinistralHandcannon,
			// Token: 0x04001E06 RID: 7686
			DextralHandcannon,
			// Token: 0x04001E07 RID: 7687
			ToxicBolter,
			// Token: 0x04001E08 RID: 7688
			FrozenCape,
			// Token: 0x04001E09 RID: 7689
			BandOfTheElements,
			// Token: 0x04001E0A RID: 7690
			ClericsClasp,
			// Token: 0x04001E0B RID: 7691
			ClericsBoots,
			// Token: 0x04001E0C RID: 7692
			ClericsCape,
			// Token: 0x04001E0D RID: 7693
			ClericsGloves,
			// Token: 0x04001E0E RID: 7694
			ClericsHood,
			// Token: 0x04001E0F RID: 7695
			ClericsLeggings,
			// Token: 0x04001E10 RID: 7696
			HuntsmansTunic,
			// Token: 0x04001E11 RID: 7697
			HuntsmansBoots,
			// Token: 0x04001E12 RID: 7698
			HuntsmansBracers,
			// Token: 0x04001E13 RID: 7699
			HuntsmansCape,
			// Token: 0x04001E14 RID: 7700
			HuntsmansHat,
			// Token: 0x04001E15 RID: 7701
			HuntsmansPads,
			// Token: 0x04001E16 RID: 7702
			RegalPlate,
			// Token: 0x04001E17 RID: 7703
			RegalClasp,
			// Token: 0x04001E18 RID: 7704
			RegalBracers,
			// Token: 0x04001E19 RID: 7705
			RegalGauntlets,
			// Token: 0x04001E1A RID: 7706
			RegalPauldrons,
			// Token: 0x04001E1B RID: 7707
			RegalGreaves,
			// Token: 0x04001E1C RID: 7708
			OrnateWarhorn,
			// Token: 0x04001E1D RID: 7709
			LichsLeggings,
			// Token: 0x04001E1E RID: 7710
			OrcishWarblade,
			// Token: 0x04001E1F RID: 7711
			ShadowSteps,
			// Token: 0x04001E20 RID: 7712
			ShimmerShroud,
			// Token: 0x04001E21 RID: 7713
			BandOfLapidary,
			// Token: 0x04001E22 RID: 7714
			PendantOfUndeath,
			// Token: 0x04001E23 RID: 7715
			SavageFlail,
			// Token: 0x04001E24 RID: 7716
			ConsumingStaff,
			// Token: 0x04001E25 RID: 7717
			ChromaticStone,
			// Token: 0x04001E26 RID: 7718
			AbyssalScythe,
			// Token: 0x04001E27 RID: 7719
			DemonicCape,
			// Token: 0x04001E28 RID: 7720
			NomadicRunestone,
			// Token: 0x04001E29 RID: 7721
			ToxicTunic,
			// Token: 0x04001E2A RID: 7722
			DecayingFragment,
			// Token: 0x04001E2B RID: 7723
			SpikedShield,
			// Token: 0x04001E2C RID: 7724
			ObsidianBulwark,
			// Token: 0x04001E2D RID: 7725
			MoltenSteps,
			// Token: 0x04001E2E RID: 7726
			ScorchingBand,
			// Token: 0x04001E2F RID: 7727
			ObsidianPendant,
			// Token: 0x04001E30 RID: 7728
			PaladinRelic,
			// Token: 0x04001E31 RID: 7729
			CrusaderRelic,
			// Token: 0x04001E32 RID: 7730
			InquisitorRelic,
			// Token: 0x04001E33 RID: 7731
			TemplarRelic,
			// Token: 0x04001E34 RID: 7732
			VermillionBand,
			// Token: 0x04001E35 RID: 7733
			PewterBand,
			// Token: 0x04001E36 RID: 7734
			ViridianBand,
			// Token: 0x04001E37 RID: 7735
			DisintegrationBand,
			// Token: 0x04001E38 RID: 7736
			AbyssalHood,
			// Token: 0x04001E39 RID: 7737
			ObscureGreaves,
			// Token: 0x04001E3A RID: 7738
			FreezingPoint,
			// Token: 0x04001E3B RID: 7739
			ResilientPads,
			// Token: 0x04001E3C RID: 7740
			WardensLeggings,
			// Token: 0x04001E3D RID: 7741
			HydrascaleBoots,
			// Token: 0x04001E3E RID: 7742
			DivinersGrips,
			// Token: 0x04001E3F RID: 7743
			CuttingEdge,
			// Token: 0x04001E40 RID: 7744
			AzurePauldrons,
			// Token: 0x04001E41 RID: 7745
			ConductionArbalest,
			// Token: 0x04001E42 RID: 7746
			OrnateBelt,
			// Token: 0x04001E43 RID: 7747
			AntiquityTunic,
			// Token: 0x04001E44 RID: 7748
			CharredQuiver,
			// Token: 0x04001E45 RID: 7749
			WardingStep,
			// Token: 0x04001E46 RID: 7750
			StormBeacon,
			// Token: 0x04001E47 RID: 7751
			Virulence,
			// Token: 0x04001E48 RID: 7752
			AncientAegis
		}

		// Token: 0x020003A7 RID: 935
		public enum EquipmentArchetype
		{
			// Token: 0x04001E4A RID: 7754
			None,
			// Token: 0x04001E4B RID: 7755
			Melee,
			// Token: 0x04001E4C RID: 7756
			Ranged,
			// Token: 0x04001E4D RID: 7757
			Magic,
			// Token: 0x04001E4E RID: 7758
			Arcane,
			// Token: 0x04001E4F RID: 7759
			Lightning,
			// Token: 0x04001E50 RID: 7760
			Fire,
			// Token: 0x04001E51 RID: 7761
			Cold,
			// Token: 0x04001E52 RID: 7762
			Physical,
			// Token: 0x04001E53 RID: 7763
			DamageOverTime,
			// Token: 0x04001E54 RID: 7764
			Health,
			// Token: 0x04001E55 RID: 7765
			Barrier,
			// Token: 0x04001E56 RID: 7766
			Bleed,
			// Token: 0x04001E57 RID: 7767
			Poison,
			// Token: 0x04001E58 RID: 7768
			Elemental
		}

		// Token: 0x020003A8 RID: 936
		public enum DropLocation
		{
			// Token: 0x04001E5A RID: 7770
			SpecialDrop,
			// Token: 0x04001E5B RID: 7771
			DefaultAccessoriesT1,
			// Token: 0x04001E5C RID: 7772
			DefaultT1,
			// Token: 0x04001E5D RID: 7773
			DefaultT2,
			// Token: 0x04001E5E RID: 7774
			DefaultT3,
			// Token: 0x04001E5F RID: 7775
			DefaultT4,
			// Token: 0x04001E60 RID: 7776
			DefaultT5,
			// Token: 0x04001E61 RID: 7777
			DefaultT6,
			// Token: 0x04001E62 RID: 7778
			MagicDrop,
			// Token: 0x04001E63 RID: 7779
			RareDrop,
			// Token: 0x04001E64 RID: 7780
			NemesisDrop,
			// Token: 0x04001E65 RID: 7781
			PhysicalDrop,
			// Token: 0x04001E66 RID: 7782
			FireDrop,
			// Token: 0x04001E67 RID: 7783
			ColdDrop,
			// Token: 0x04001E68 RID: 7784
			LightningDrop,
			// Token: 0x04001E69 RID: 7785
			ArcaneDrop,
			// Token: 0x04001E6A RID: 7786
			MonsterGemDrop,
			// Token: 0x04001E6B RID: 7787
			BossGemDrop,
			// Token: 0x04001E6C RID: 7788
			Crafted,
			// Token: 0x04001E6D RID: 7789
			CampaignReward,
			// Token: 0x04001E6E RID: 7790
			BonusReward,
			// Token: 0x04001E6F RID: 7791
			BountyMission,
			// Token: 0x04001E70 RID: 7792
			AgonyMission,
			// Token: 0x04001E71 RID: 7793
			AllMonsters,
			// Token: 0x04001E72 RID: 7794
			NormalRaids,
			// Token: 0x04001E73 RID: 7795
			HeroicRaids,
			// Token: 0x04001E74 RID: 7796
			AgonyModifierReward
		}

		// Token: 0x020003A9 RID: 937
		public static partial class GemBases
		{
			// Token: 0x17000CFC RID: 3324
			// (get) Token: 0x06002B88 RID: 11144 RVA: 0x0001C125 File Offset: 0x0001A325
			// (set) Token: 0x06002B89 RID: 11145 RVA: 0x0001C12C File Offset: 0x0001A32C
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.GemBases.GemTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>> GemDatabase
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.GemBases.GemTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CFD RID: 3325
			// (get) Token: 0x06002B8A RID: 11146 RVA: 0x0001C134 File Offset: 0x0001A334
			// (set) Token: 0x06002B8B RID: 11147 RVA: 0x0001C13B File Offset: 0x0001A33B
			[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
			{
				"BonusRequirement",
				"Enchant"
			})]
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.GemBases.SetBonus, global::System.ValueTuple<int, global::LootClicker.Items.EnchantID>> SetBonuses
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				[return: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"BonusRequirement",
					"Enchant"
				})]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.GemBases.SetBonus, global::System.ValueTuple<int, global::LootClicker.Items.EnchantID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				[param: global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"BonusRequirement",
					"Enchant"
				})]
				set
				{
				}
			}

			// Token: 0x06002B8C RID: 11148 RVA: 0x0001C143 File Offset: 0x0001A343
			internal static void Setup()
			{
			}

			// Token: 0x06002B8D RID: 11149 RVA: 0x0001C163 File Offset: 0x0001A363
			private static void AddToDatabase(global::LootClicker.Items.GemBase gemBase)
			{
			}

			// Token: 0x06002B8E RID: 11150 RVA: 0x000DC814 File Offset: 0x000DAA14
			public static void DiscoverBasicGems()
			{
			}

			// Token: 0x06002B8F RID: 11151 RVA: 0x000DC878 File Offset: 0x000DAA78
			// Note: this type is marked as 'beforefieldinit'.
			static GemBases()
			{
			}

			// Token: 0x04001E77 RID: 7799
			public static readonly global::LootClicker.Items.AttributeStat[] GemOffensiveAttributes;

			// Token: 0x04001E78 RID: 7800
			public static readonly global::LootClicker.Items.AttributeStat[] GemDefensiveAttributes;

			// Token: 0x04001E79 RID: 7801
			public static readonly global::LootClicker.Items.AttributeStat[] GemUtilityAttributes;

			// Token: 0x04001E7A RID: 7802
			public static readonly global::LootClicker.Items.AttributeStat[] GemAttributes;

			// Token: 0x020003AA RID: 938
			public enum GemTypes
			{
				// Token: 0x04001E7C RID: 7804
				BasicGem,
				// Token: 0x04001E7D RID: 7805
				FineGem,
				// Token: 0x04001E7E RID: 7806
				GrandGem
			}

			// Token: 0x020003AB RID: 939
			public enum SetBonus
			{
				// Token: 0x04001E80 RID: 7808
				None,
				// Token: 0x04001E81 RID: 7809
				CutRuby,
				// Token: 0x04001E82 RID: 7810
				CutOpal,
				// Token: 0x04001E83 RID: 7811
				CutPeridot,
				// Token: 0x04001E84 RID: 7812
				CutAmber,
				// Token: 0x04001E85 RID: 7813
				CutMalachite,
				// Token: 0x04001E86 RID: 7814
				CutSapphire,
				// Token: 0x04001E87 RID: 7815
				CutAmethyst,
				// Token: 0x04001E88 RID: 7816
				Elementstones,
				// Token: 0x04001E89 RID: 7817
				SteelPrism,
				// Token: 0x04001E8A RID: 7818
				FerrousCore,
				// Token: 0x04001E8B RID: 7819
				PolishedFang,
				// Token: 0x04001E8C RID: 7820
				DecayingFragment
			}

			// Token: 0x020003AC RID: 940
			public static partial class Gems
			{
				// Token: 0x06002B90 RID: 11152 RVA: 0x000DC8E0 File Offset: 0x000DAAE0
				internal static void SetupSetBonuses()
				{
				}
			}
		}

		// Token: 0x020003AD RID: 941
		public static class OffhandBases
		{
			// Token: 0x17000CFE RID: 3326
			// (get) Token: 0x06002B92 RID: 11154 RVA: 0x0001C194 File Offset: 0x0001A394
			// (set) Token: 0x06002B93 RID: 11155 RVA: 0x0001C19B File Offset: 0x0001A39B
			public static global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes> ShieldCompatibility
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000CFF RID: 3327
			// (get) Token: 0x06002B94 RID: 11156 RVA: 0x0001C1A3 File Offset: 0x0001A3A3
			// (set) Token: 0x06002B95 RID: 11157 RVA: 0x0001C1AA File Offset: 0x0001A3AA
			public static global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes> QuiverCompatibility
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000D00 RID: 3328
			// (get) Token: 0x06002B96 RID: 11158 RVA: 0x0001C1B2 File Offset: 0x0001A3B2
			// (set) Token: 0x06002B97 RID: 11159 RVA: 0x0001C1B9 File Offset: 0x0001A3B9
			public static global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes> WardCompatibility
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000D01 RID: 3329
			// (get) Token: 0x06002B98 RID: 11160 RVA: 0x0001C1C1 File Offset: 0x0001A3C1
			// (set) Token: 0x06002B99 RID: 11161 RVA: 0x0001C1C8 File Offset: 0x0001A3C8
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.OffhandBases.OffhandTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>> OffhandDatabase
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.OffhandBases.OffhandTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x06002B9A RID: 11162 RVA: 0x000DD918 File Offset: 0x000DBB18
			internal static void Setup()
			{
			}

			// Token: 0x06002B9B RID: 11163 RVA: 0x0001C1D0 File Offset: 0x0001A3D0
			private static void AddToDatabase(global::LootClicker.Items.ShieldBase shieldBase)
			{
			}

			// Token: 0x06002B9C RID: 11164 RVA: 0x0001C1FC File Offset: 0x0001A3FC
			private static void AddToDatabase(global::LootClicker.Items.QuiverBase quiverBase)
			{
			}

			// Token: 0x06002B9D RID: 11165 RVA: 0x0001C228 File Offset: 0x0001A428
			private static void AddToDatabase(global::LootClicker.Items.WardBase wardBase)
			{
			}

			// Token: 0x06002B9E RID: 11166 RVA: 0x0001C254 File Offset: 0x0001A454
			public static global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes> GetCompatibleMainhands(global::LootClicker.Items.Equipment.OffhandBases.OffhandTypes type)
			{
				return default(global::System.Collections.Generic.HashSet<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes>);
			}

			// Token: 0x04001E90 RID: 7824
			public const int T2DamageBase = 40;

			// Token: 0x04001E91 RID: 7825
			public const int T2DamageIncrement = 4;

			// Token: 0x04001E92 RID: 7826
			public const int T3DamageBase = 60;

			// Token: 0x04001E93 RID: 7827
			public const int T3DamageIncrmeent = 6;

			// Token: 0x04001E94 RID: 7828
			public const int T4DamageBase = 80;

			// Token: 0x04001E95 RID: 7829
			public const int T4DamageIncrement = 8;

			// Token: 0x020003AE RID: 942
			public enum OffhandTypes
			{
				// Token: 0x04001E98 RID: 7832
				Shield,
				// Token: 0x04001E99 RID: 7833
				Quiver,
				// Token: 0x04001E9A RID: 7834
				Ward
			}

			// Token: 0x020003AF RID: 943
			public static class Shields
			{
				// Token: 0x06002B9F RID: 11167 RVA: 0x000DD9C4 File Offset: 0x000DBBC4
				internal static void Setup()
				{
				}

				// Token: 0x06002BA0 RID: 11168 RVA: 0x000DE6C4 File Offset: 0x000DC8C4
				// Note: this type is marked as 'beforefieldinit'.
				static Shields()
				{
				}

				// Token: 0x04001E9B RID: 7835
				public static readonly global::LootClicker.Items.AttributeStat[] OffensiveAttributes;

				// Token: 0x04001E9C RID: 7836
				public static readonly global::LootClicker.Items.AttributeStat[] DefensiveAttributes;

				// Token: 0x04001E9D RID: 7837
				public static readonly global::LootClicker.Items.AttributeStat[] UtilityAttributes;

				// Token: 0x04001E9E RID: 7838
				public const int MaxSockets = 2;
			}

			// Token: 0x020003B0 RID: 944
			public static class Quivers
			{
				// Token: 0x06002BA1 RID: 11169 RVA: 0x000DE714 File Offset: 0x000DC914
				internal static void Setup()
				{
				}

				// Token: 0x06002BA2 RID: 11170 RVA: 0x000DEDF4 File Offset: 0x000DCFF4
				// Note: this type is marked as 'beforefieldinit'.
				static Quivers()
				{
				}

				// Token: 0x04001E9F RID: 7839
				public static readonly global::LootClicker.Items.AttributeStat[] OffensiveAttributes;

				// Token: 0x04001EA0 RID: 7840
				public static readonly global::LootClicker.Items.AttributeStat[] DefensiveAttributes;

				// Token: 0x04001EA1 RID: 7841
				public static readonly global::LootClicker.Items.AttributeStat[] UtilityAttributes;

				// Token: 0x04001EA2 RID: 7842
				public const int MaxSockets = 2;
			}

			// Token: 0x020003B1 RID: 945
			public static class Wards
			{
				// Token: 0x06002BA3 RID: 11171 RVA: 0x000DEE44 File Offset: 0x000DD044
				internal static void Setup()
				{
				}

				// Token: 0x06002BA4 RID: 11172 RVA: 0x000DF5A0 File Offset: 0x000DD7A0
				// Note: this type is marked as 'beforefieldinit'.
				static Wards()
				{
				}

				// Token: 0x04001EA3 RID: 7843
				public static readonly global::LootClicker.Items.AttributeStat[] OffensiveAttributes;

				// Token: 0x04001EA4 RID: 7844
				public static readonly global::LootClicker.Items.AttributeStat[] DefensiveAttributes;

				// Token: 0x04001EA5 RID: 7845
				public static readonly global::LootClicker.Items.AttributeStat[] UtilityAttributes;

				// Token: 0x04001EA6 RID: 7846
				public const int MaxSockets = 2;
			}
		}

		// Token: 0x020003B2 RID: 946
		public static class RelicBases
		{
			// Token: 0x17000D02 RID: 3330
			// (get) Token: 0x06002BA5 RID: 11173 RVA: 0x0001C281 File Offset: 0x0001A481
			// (set) Token: 0x06002BA6 RID: 11174 RVA: 0x0001C288 File Offset: 0x0001A488
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.RelicBases.RelicType, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>> RelicDatabase
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.RelicBases.RelicType, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x06002BA7 RID: 11175 RVA: 0x0001C290 File Offset: 0x0001A490
			internal static void Setup()
			{
			}

			// Token: 0x06002BA8 RID: 11176 RVA: 0x000104AE File Offset: 0x0000E6AE
			public static global::LootClicker.Items.Equipment.EquipmentType GetEquipmentType(global::LootClicker.Items.Equipment.RelicBases.RelicType type)
			{
				return default(global::LootClicker.Items.Equipment.EquipmentType);
			}

			// Token: 0x06002BA9 RID: 11177 RVA: 0x0001C2A1 File Offset: 0x0001A4A1
			private static void AddToDatabase(global::LootClicker.Items.RelicBase relicBase)
			{
			}

			// Token: 0x06002BAA RID: 11178 RVA: 0x000DF5F0 File Offset: 0x000DD7F0
			public static global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> GetAttributesForRelic(global::LootClicker.Entities.Characters.CharacterClass characterClass)
			{
				return default(global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat>);
			}

			// Token: 0x06002BAB RID: 11179 RVA: 0x000DF640 File Offset: 0x000DD840
			public static global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> GetAttributesForRelic(global::LootClicker.Entities.Characters.AscendancyClass ascendancyClass)
			{
				return default(global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat>);
			}

			// Token: 0x06002BAC RID: 11180 RVA: 0x000DF744 File Offset: 0x000DD944
			public static global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat> GetAttributesForRelic(global::LootClicker.Entities.Characters.AscendancyClass ascendancyClass, global::LootClicker.Items.AttributeType attributeType)
			{
				return default(global::System.Collections.Generic.List<global::LootClicker.Items.AttributeStat>);
			}

			// Token: 0x06002BAD RID: 11181 RVA: 0x000DF7E4 File Offset: 0x000DD9E4
			public static global::LootClicker.Items.Equipment.EquipmentID GetRelicRoll(int itemLevel)
			{
				return default(global::LootClicker.Items.Equipment.EquipmentID);
			}

			// Token: 0x06002BAE RID: 11182 RVA: 0x0001C2D2 File Offset: 0x0001A4D2
			public static global::LootClicker.Items.Equipment.EquipmentID GetRelicRoll(global::LootClicker.Entities.Characters.CharacterClass characterClass)
			{
				return default(global::LootClicker.Items.Equipment.EquipmentID);
			}

			// Token: 0x06002BAF RID: 11183 RVA: 0x000DF848 File Offset: 0x000DDA48
			public static global::LootClicker.Items.Equipment.EquipmentID GetRelicRoll(global::LootClicker.Entities.Characters.AscendancyClass ascendancyClass)
			{
				return default(global::LootClicker.Items.Equipment.EquipmentID);
			}

			// Token: 0x06002BB0 RID: 11184 RVA: 0x000DF8D4 File Offset: 0x000DDAD4
			public static bool GenerateRelicDrop(int itemLevel, global::LootClicker.Items.Rarity rarity, bool overrideFilter = false)
			{
				return default(bool);
			}

			// Token: 0x020003B3 RID: 947
			public enum RelicType
			{
				// Token: 0x04001EA9 RID: 7849
				ClassRelic,
				// Token: 0x04001EAA RID: 7850
				AscendancyRelic
			}

			// Token: 0x020003B4 RID: 948
			public static class Relics
			{
				// Token: 0x06002BB1 RID: 11185 RVA: 0x000DF9AC File Offset: 0x000DDBAC
				internal static void Setup()
				{
				}

				// Token: 0x06002BB2 RID: 11186 RVA: 0x000E0020 File Offset: 0x000DE220
				// Note: this type is marked as 'beforefieldinit'.
				static Relics()
				{
				}

				// Token: 0x04001EAB RID: 7851
				public static readonly global::LootClicker.Items.AttributeStat[] WarriorAttributes;

				// Token: 0x04001EAC RID: 7852
				public static readonly global::LootClicker.Items.AttributeStat[] RangerAttributes;

				// Token: 0x04001EAD RID: 7853
				public static readonly global::LootClicker.Items.AttributeStat[] MageAttributes;

				// Token: 0x04001EAE RID: 7854
				public static readonly global::LootClicker.Items.AttributeStat[] PaladinAttributes;

				// Token: 0x04001EAF RID: 7855
				public static readonly global::LootClicker.Items.AttributeStat[] OffensiveAscendancyAttributes;

				// Token: 0x04001EB0 RID: 7856
				public static readonly global::LootClicker.Items.AttributeStat[] UtilityAscendancyAttributes;

				// Token: 0x04001EB1 RID: 7857
				public static readonly global::LootClicker.Items.AttributeStat[] WarriorAscendancyAttributes;

				// Token: 0x04001EB2 RID: 7858
				public static readonly global::LootClicker.Items.AttributeStat[] WarriorDefensiveAscendancyAttributes;

				// Token: 0x04001EB3 RID: 7859
				public static readonly global::LootClicker.Items.AttributeStat[] RangerAscendancyAttributes;

				// Token: 0x04001EB4 RID: 7860
				public static readonly global::LootClicker.Items.AttributeStat[] RangerDefensiveAscendancyAttribute;

				// Token: 0x04001EB5 RID: 7861
				public static readonly global::LootClicker.Items.AttributeStat[] MageAscendancyAttributes;

				// Token: 0x04001EB6 RID: 7862
				public static readonly global::LootClicker.Items.AttributeStat[] MageDefensiveAscendancyAttributes;

				// Token: 0x04001EB7 RID: 7863
				public static readonly global::LootClicker.Items.AttributeStat[] PaladinAscendancyAttributes;

				// Token: 0x04001EB8 RID: 7864
				public static readonly global::LootClicker.Items.AttributeStat[] PaladinDefensiveAscendancyAttributes;

				// Token: 0x04001EB9 RID: 7865
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"ID",
					"Count"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.Materials.MaterialID, int>[] RelicMaterials;

				// Token: 0x04001EBA RID: 7866
				[global::System.Runtime.CompilerServices.TupleElementNames(new string[]
				{
					"ID",
					"Count"
				})]
				public static readonly global::System.ValueTuple<global::LootClicker.Items.Materials.MaterialID, int>[] AscendancyRelicMaterials;

				// Token: 0x04001EBB RID: 7867
				public static readonly string RelicText;
			}
		}

		// Token: 0x020003B5 RID: 949
		public static class WeaponBases
		{
			// Token: 0x17000D03 RID: 3331
			// (get) Token: 0x06002BB3 RID: 11187 RVA: 0x0001C303 File Offset: 0x0001A503
			// (set) Token: 0x06002BB4 RID: 11188 RVA: 0x0001C30A File Offset: 0x0001A50A
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>> WeaponDatabase
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID>>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000D04 RID: 3332
			// (get) Token: 0x06002BB5 RID: 11189 RVA: 0x0001C312 File Offset: 0x0001A512
			// (set) Token: 0x06002BB6 RID: 11190 RVA: 0x0001C319 File Offset: 0x0001A519
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::LootClicker.Items.AttributeStat[]> OffensiveAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000D05 RID: 3333
			// (get) Token: 0x06002BB7 RID: 11191 RVA: 0x0001C321 File Offset: 0x0001A521
			// (set) Token: 0x06002BB8 RID: 11192 RVA: 0x0001C328 File Offset: 0x0001A528
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::LootClicker.Items.AttributeStat[]> DefensiveAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x17000D06 RID: 3334
			// (get) Token: 0x06002BB9 RID: 11193 RVA: 0x0001C330 File Offset: 0x0001A530
			// (set) Token: 0x06002BBA RID: 11194 RVA: 0x0001C337 File Offset: 0x0001A537
			public static global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::LootClicker.Items.AttributeStat[]> UtilityAttributes
			{
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				get
				{
					return default(global::System.Collections.Generic.Dictionary<global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes, global::LootClicker.Items.AttributeStat[]>);
				}
				[global::System.Runtime.CompilerServices.CompilerGenerated]
				set
				{
				}
			}

			// Token: 0x06002BBB RID: 11195 RVA: 0x000E0200 File Offset: 0x000DE400
			internal static void Setup()
			{
			}

			// Token: 0x06002BBC RID: 11196 RVA: 0x000E027C File Offset: 0x000DE47C
			public static bool IsWeapon2Handed(global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes type)
			{
				return default(bool);
			}

			// Token: 0x06002BBD RID: 11197 RVA: 0x000E02CC File Offset: 0x000DE4CC
			public static bool IsWeaponDoubleStatted(global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes type)
			{
				return default(bool);
			}

			// Token: 0x06002BBE RID: 11198 RVA: 0x0001C33F File Offset: 0x0001A53F
			private static void AddToDatabase(global::LootClicker.Items.WeaponBase weaponBase)
			{
			}

			// Token: 0x06002BBF RID: 11199 RVA: 0x000E031C File Offset: 0x000DE51C
			public static global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes[] GetWeaponTypeForString(string searchText)
			{
				return default(global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes[]);
			}

			// Token: 0x06002BC0 RID: 11200 RVA: 0x000E03BC File Offset: 0x000DE5BC
			public static global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes[] GetWeaponTypeForString(string[] searchNames)
			{
				return default(global::LootClicker.Items.Equipment.WeaponBases.WeaponTypes[]);
			}

			// Token: 0x06002BC1 RID: 11201 RVA: 0x000E0470 File Offset: 0x000DE670
			// Note: this type is marked as 'beforefieldinit'.
			static WeaponBases()
			{
			}

			// Token: 0x04001EBC RID: 7868
			public const int T2DamageBase = 40;

			// Token: 0x04001EBD RID: 7869
			public const int T2DamageIncrement = 4;

			// Token: 0x04001EBE RID: 7870
			public const int T3DamageBase = 60;

			// Token: 0x04001EBF RID: 7871
			public const int T3DamageIncrmeent = 6;

			// Token: 0x04001EC0 RID: 7872
			public const int T4DamageBase = 80;

			// Token: 0x04001EC1 RID: 7873
			public const int T4DamageIncrement = 8;

			// Token: 0x04001EC6 RID: 7878
			public static readonly global::System.Collections.Generic.List<global::LootClicker.Items.Equipment.EquipmentID> WeaponAugments;

			// Token: 0x020003B6 RID: 950
			public enum WeaponTypes
			{
				// Token: 0x04001EC8 RID: 7880
				Axe,
				// Token: 0x04001EC9 RID: 7881
				Bow,
				// Token: 0x04001ECA RID: 7882
				Fist,
				// Token: 0x04001ECB RID: 7883
				Mace,
				// Token: 0x04001ECC RID: 7884
				Crossbow,
				// Token: 0x04001ECD RID: 7885
				Dagger,
				// Token: 0x04001ECE RID: 7886
				Gun,
				// Token: 0x04001ECF RID: 7887
				Hammer,
				// Token: 0x04001ED0 RID: 7888
				Polearm,
				// Token: 0x04001ED1 RID: 7889
				Staff,
				// Token: 0x04001ED2 RID: 7890
				Sword,
				// Token: 0x04001ED3 RID: 7891
				Spellblade,
				// Token: 0x04001ED4 RID: 7892
				SpellTome,
				// Token: 0x04001ED5 RID: 7893
				Pistol
			}

			// Token: 0x020003B7 RID: 951
			public static class Axes
			{
				// Token: 0x06002BC2 RID: 11202 RVA: 0x000E05C8 File Offset: 0x000DE7C8
				internal static void Setup()
				{
				}

				// Token: 0x04001ED6 RID: 7894
				public const int MaxSockets = 2;

				// Token: 0x04001ED7 RID: 7895
				public const int MetalSalvage = 4;

				// Token: 0x04001ED8 RID: 7896
				public const int WoodSalvage = 4;
			}

			// Token: 0x020003B8 RID: 952
			public static class Bows
			{
				// Token: 0x06002BC3 RID: 11203 RVA: 0x000E0E14 File Offset: 0x000DF014
				internal static void Setup()
				{
				}

				// Token: 0x04001ED9 RID: 7897
				public const int MaxSockets = 2;

				// Token: 0x04001EDA RID: 7898
				public const int WoodSalvage = 16;

				// Token: 0x04001EDB RID: 7899
				public const int MetalSalvage = 2;
			}

			// Token: 0x020003B9 RID: 953
			public static class Crossbows
			{
				// Token: 0x06002BC4 RID: 11204 RVA: 0x000E1700 File Offset: 0x000DF900
				internal static void Setup()
				{
				}

				// Token: 0x04001EDC RID: 7900
				public const int MaxSockets = 2;

				// Token: 0x04001EDD RID: 7901
				public const int WoodSalvage = 16;
			}

			// Token: 0x020003BA RID: 954
			public static class Daggers
			{
				// Token: 0x06002BC5 RID: 11205 RVA: 0x000E1DEC File Offset: 0x000DFFEC
				internal static void Setup()
				{
				}

				// Token: 0x04001EDE RID: 7902
				public const int MaxSockets = 2;

				// Token: 0x04001EDF RID: 7903
				public const int MetalSalvage = 4;

				// Token: 0x04001EE0 RID: 7904
				public const int WoodSalvage = 4;
			}

			// Token: 0x020003BB RID: 955
			public static class Fists
			{
				// Token: 0x06002BC6 RID: 11206 RVA: 0x000E262C File Offset: 0x000E082C
				internal static void Setup()
				{
				}

				// Token: 0x04001EE1 RID: 7905
				public const int MaxSockets = 2;

				// Token: 0x04001EE2 RID: 7906
				public const int MetalSalvage = 4;

				// Token: 0x04001EE3 RID: 7907
				public const int WoodSalvage = 4;
			}

			// Token: 0x020003BC RID: 956
			public static class Guns
			{
				// Token: 0x06002BC7 RID: 11207 RVA: 0x000E2D0C File Offset: 0x000E0F0C
				internal static void Setup()
				{
				}

				// Token: 0x04001EE4 RID: 7908
				public const int MaxSockets = 4;

				// Token: 0x04001EE5 RID: 7909
				public const int MetalSalvage = 8;

				// Token: 0x04001EE6 RID: 7910
				public const int WoodSalvage = 8;
			}

			// Token: 0x020003BD RID: 957
			public static class Hammers
			{
				// Token: 0x06002BC8 RID: 11208 RVA: 0x000E3278 File Offset: 0x000E1478
				internal static void Setup()
				{
				}

				// Token: 0x04001EE7 RID: 7911
				public const int MaxSockets = 4;

				// Token: 0x04001EE8 RID: 7912
				public const int MetalSalvage = 8;

				// Token: 0x04001EE9 RID: 7913
				public const int WoodSalvage = 8;
			}

			// Token: 0x020003BE RID: 958
			public static class Maces
			{
				// Token: 0x06002BC9 RID: 11209 RVA: 0x000E38AC File Offset: 0x000E1AAC
				internal static void Setup()
				{
				}

				// Token: 0x04001EEA RID: 7914
				public const int MaxSockets = 2;

				// Token: 0x04001EEB RID: 7915
				public const int MetalSalvage = 4;

				// Token: 0x04001EEC RID: 7916
				public const int WoodSalvage = 4;
			}

			// Token: 0x020003BF RID: 959
			public static class Polearms
			{
				// Token: 0x06002BCA RID: 11210 RVA: 0x000E3FA4 File Offset: 0x000E21A4
				internal static void Setup()
				{
				}

				// Token: 0x04001EED RID: 7917
				public const int MaxSockets = 4;

				// Token: 0x04001EEE RID: 7918
				public const int MetalSalvage = 8;

				// Token: 0x04001EEF RID: 7919
				public const int WoodSalvage = 8;
			}

			// Token: 0x020003C0 RID: 960
			public static class Staves
			{
				// Token: 0x06002BCB RID: 11211 RVA: 0x000E4A38 File Offset: 0x000E2C38
				internal static void Setup()
				{
				}

				// Token: 0x04001EF0 RID: 7920
				public const int MaxSockets = 4;

				// Token: 0x04001EF1 RID: 7921
				public const int WoodSalvage = 16;
			}

			// Token: 0x020003C1 RID: 961
			public static class Swords
			{
				// Token: 0x06002BCC RID: 11212 RVA: 0x000E54DC File Offset: 0x000E36DC
				internal static void Setup()
				{
				}

				// Token: 0x04001EF2 RID: 7922
				public const int MaxSockets = 2;

				// Token: 0x04001EF3 RID: 7923
				public const int MetalSalvage = 4;

				// Token: 0x04001EF4 RID: 7924
				public const int WoodSalvage = 4;
			}

			// Token: 0x020003C2 RID: 962
			public static class Spellblades
			{
				// Token: 0x06002BCD RID: 11213 RVA: 0x000E5F84 File Offset: 0x000E4184
				internal static void Setup()
				{
				}

				// Token: 0x04001EF5 RID: 7925
				public const int MaxSockets = 2;

				// Token: 0x04001EF6 RID: 7926
				public const int MetalSalvage = 4;

				// Token: 0x04001EF7 RID: 7927
				public const int WoodSalvage = 4;
			}

			// Token: 0x020003C3 RID: 963
			public static class SpellTomes
			{
				// Token: 0x06002BCE RID: 11214 RVA: 0x000E6A10 File Offset: 0x000E4C10
				internal static void Setup()
				{
				}

				// Token: 0x04001EF8 RID: 7928
				public const int MaxSockets = 2;

				// Token: 0x04001EF9 RID: 7929
				public const int LeatherSalvage = 4;

				// Token: 0x04001EFA RID: 7930
				public const int ClothSalvage = 2;
			}

			// Token: 0x020003C4 RID: 964
			public static class Pistols
			{
				// Token: 0x06002BCF RID: 11215 RVA: 0x000E7304 File Offset: 0x000E5504
				internal static void Setup()
				{
				}

				// Token: 0x04001EFB RID: 7931
				public const int MaxSockets = 2;

				// Token: 0x04001EFC RID: 7932
				public const int MetalSalvage = 4;

				// Token: 0x04001EFD RID: 7933
				public const int WoodSalvage = 4;
			}
		}
	}
}
